
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from tkinter import filedialog
import shutil
from pathlib import Path
from tkinter import Label, Canvas, Tk , simpledialog , Canvas, PhotoImage, messagebox, Entry , Button
import subprocess
from Loginn import user
import sys
import Conn
from PySimpleGUI import PySimpleGUI as sg
from openpyxl.styles import Alignment
import pyodbc
from datetime import datetime
import os
import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')  # เปลี่ยน 'en_US.UTF-8' เป็น locale ที่ถูกต้องสำหรับระบบของคุณ
import json
import pandas as pd
import sqlite3
from PyPDF2 import PdfReader, PdfWriter
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import io
import sys
import tkinter as tk
from datetime import datetime
import os
from PyPDF2 import PdfReader, PdfWriter
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import io
import sys
import tkinter as tk
from datetime import datetime
import os




OUTPUT_PATH = Path(__file__).parent


def get_assets_path():
    # รับเส้นทางที่โปรแกรม exe อยู่
    exe_path = os.path.dirname(sys.argv[0])
    # ระบุเส้นทางสำหรับโฟลเดอร์ assets/frame0
    assets_path = os.path.join(exe_path, 'assets', 'AllImage')
    return assets_path

# เรียกใช้ฟังก์ชันเพื่อรับเส้นทางของโฟลเดอร์ assets
ASSETS_PATH = get_assets_path()
print("เส้นทางสำหรับโฟลเดอร์ของรูปภาพ:", ASSETS_PATH)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


quotation_text = None
image_6 = None


window = Tk()
# ดึงขนาดหน้าจอทั้งหมด
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
# ตั้งค่าขนาดหน้าต่างของโปรแกรมให้เต็มจอ
window.geometry("1270x680")
window.configure(bg = "#FFFFFF")

is_quotation_created = False
is_receipt_created = False
is_invoice_created = False
is_creditNote_created = False
is_DebitNote_created = False
is_PO_created = False
is_SalesDocument = False
Quotation_Text = False
PO_Text = False
is_vandor = False
PO_SalesPO = False
POIN_text = False
NamePO_PO = False
NamePO_Image = False
SavePDFs = False

connection_string = Conn.connection_string
# ตรวจสอบว่าการเชื่อมต่อสำเร็จหรือไม่
connection = pyodbc.connect(connection_string)
#คลาสสำหรับเวลากดประเภทเอกสาร
class Quotation:
    original_text_color = ""
    original_cursor = ""


    def on_quotation_click(self, event):
        global savecompleted,SavePDFs,is_PO_clicked,NamePO_Image,PO_SalesPO,SalesPO,PO_Text,SalesQuotation,Quotation_Text,is_PO_created, create_NewPO, is_DebitNote_created,create_NewDebitNote,is_quotation_created, is_receipt_created, Create_NewQuotation, Create_NewReceipt, is_invoice_created , is_PO_created, Create_NewInvoice ,is_creditNote_created ,create_NewCreditNote
        
        print("Quotation clicked")
        is_PO_clicked = False
        canvas.itemconfigure(image_2, state="normal")  # แสดงรูปภาพอีกครั้ง

        if not Quotation_Text:
            SalesQuotation = canvas.create_text(
            370.0,
            160.0,
            anchor="nw",
            text="Quotation",
            fill="#555555",
            font=("Inter", 14 * -1)
            )
            Quotation_Text = True

        if SavePDFs:
            canvas.delete(savecompleted)
            SavePDFs = False

              # ลบข้อความที่มีอยู่PO
        if is_PO_created:
            CustomerNamePO_text.destroy()
            RefernceNoPO_Text.destroy()
            pdffile_Text.destroy()
            Date_text.destroy()
            canvas.delete(create_NewPO)
            canvas.delete(SalesPO)
            canvas.delete(NamePO)
            canvas.delete(Reference)
            canvas.delete(TextPDF)
            
            canvas.itemconfigure(PO_instance.image_PO1, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO2, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO3, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO4, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO5, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO6, state="hidden")
            canvas.itemconfigure(PO_instance.image_111, state="hidden")
            canvas.delete(Date_Pdfinput)
            
                        # ลบทุก Header โดยใช้ลูป for
            for header_id in POTabelHeaders:
                canvas.delete(header_id)
            is_PO_created = False
        # ลบข้อความที่มีอยู่
        if is_receipt_created:
            canvas.delete(Create_NewReceipt)
            canvas.delete(Create_Receipt)
            is_receipt_created = False
    
        # ลบข้อความที่มีอยู่
        if is_invoice_created:
            canvas.delete(Create_NewInvoice)
            canvas.delete(Create_Invoice)
            is_invoice_created = False
    
        # ลบข้อความที่มีอยู่Creditnote
        if is_creditNote_created:
            canvas.delete(create_NewCreditNote)
            is_creditNote_created = False

         # ลบข้อความที่มีอยู่DebitNote
        if is_DebitNote_created:
            canvas.delete(create_NewDebitNote)
            is_DebitNote_created = False

         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")
        canvas.delete("sql_PO")
        canvas.delete("sql_Receipt")
        canvas.delete("sql_Invoice")
        canvas.delete("sql_POIN")
        
        
        if not is_quotation_created:
            Create_NewQuotation = canvas.create_text(
                310.0,
                210.0,
                anchor="nw",
                text="CreateNewQuotation",
                fill="#555555",
                font=("Inter", 14 * -1)
            )

            # Add event handlers
            canvas.tag_bind(Create_NewQuotation, "<Button-1>", lambda e, instance=CreateNewQuotation_instance: instance.on_CreateNewQuotation_click(event))
            canvas.tag_bind(Create_NewQuotation, "<Enter>", lambda e, instance=CreateNewQuotation_instance: instance.on_CreateNewQuotation_enter(event))
            canvas.tag_bind(Create_NewQuotation, "<Leave>", lambda e, instance=CreateNewQuotation_instance: instance.on_CreateNewQuotation_leave(event))
            
            is_quotation_created = True

                # ดึง connection string จาก Conn.py
        connection_string = Conn.connection_string

        try:
            # ตรวจสอบว่าการเชื่อมต่อสำเร็จหรือไม่
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        # สร้าง cursor เพื่อ execute คำสั่ง SQL
        cursor = connection.cursor()

        # คำสั่ง SQL เพื่อดึงข้อมูลที่ต้องการ
        cursor.execute("SELECT [Date], [QuotationNumber], [CustomerName], [Description], [TotalAmount] FROM Quotation ORDER BY [QuotationID] DESC")

        # ดึงข้อมูลทั้งหมดจากการ execute คำสั่ง SQL
        rows = cursor.fetchall()

        # แสดงข้อมูลใน Canvas
        for row_index, row in enumerate(rows[:12]):  # แสดงเฉพาะ 10 ข้อมูลแรก
            for col_index, data in enumerate(row):  # แสดงข้อมูลทั้งหมดในแถว
                text_object = canvas.create_text(
                    header_positions[col_index],
                    290.0 + row_index * 30,  # ตำแหน่งลงมาให้ทุกแถว
                    anchor="nw",
                    text=data,
                    fill="black",
                    font=("Inter", 14 * -1)
                )
                canvas.itemconfig(text_object, tags="sql_Quotation")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL

    def on_quotation_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(quotation_text, "fill")
        canvas.itemconfig(quotation_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_quotation_leave(self, event):
        canvas.itemconfig(quotation_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)

def deiconify():
    window.deiconify()    

class CreateNewQuotation ():
    def __init__(self, username):
        self.username = username
        self.original_text_color = ""
        self.original_cursor = ""
        
    def on_CreateNewQuotation_click(self, event):
        global CreateNewQuotation
        print("CreateNewQuotation clicked") 
        window.withdraw()  # ซ่อนหน้าหลัก
            # รับเส้นทางของโปรแกรม exe
        exe_path = os.path.dirname(sys.argv[0])
        
        # ระบุเส้นทางของไฟล์ QUOTATIONNEW.py ในโฟลเดอร์เดียวกับ exe
        file_path = os.path.join(exe_path, "QUOTATIONNEW.py")
        print("เส้นทางสำหรับไฟล์ QUOTATIONNEW.py:", file_path)

        if os.path.exists(file_path):
            try:
                # เปิดโปรแกรม QUOTATIONNEW และส่งค่า username มาด้วย
                process = subprocess.Popen(["pythonw", file_path, self.username])
                
                # รอจนกว่าโปรแกรม QUOTATIONNEW จะปิดลง
                process.wait()
                
                # เมื่อโปรแกรม QUOTATIONNEW ปิดลงแล้ว โหลดหน้าหลักขึ้นมา
                window.deiconify()
            except Exception as e:
                print(f"Error: {e}")
        else:
            print(f"File not found: {file_path}")
        
        
    def on_CreateNewQuotation_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(Create_NewQuotation, "fill")
        canvas.itemconfig(Create_NewQuotation, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_CreateNewQuotation_leave(self, event):
        canvas.itemconfig(Create_NewQuotation, fill=original_text_color)
        canvas.config(cursor=original_cursor)
# เรียกใช้คลาส CreateNewQuotation พร้อมส่ง Username เข้าไป
username = user.getusername()  # นำ Username ที่เข้าสู่ระบบมาใช้งาน
new_quotation = CreateNewQuotation(username)

class Receipt:
    original_text_color = ""
    original_cursor = ""


    def on_receipt_click(self, event):
        global savecompleted,SavePDFs,is_PO_clicked,Create_Receipt,SalesPO,is_PO_created, create_NewPO, is_DebitNote_created, create_NewDebitNote, is_quotation_created, is_receipt_created, Create_NewQuotation, Create_NewReceipt, Create_NewInvoice, is_invoice_created,is_creditNote_created,is_creditNote_created ,create_NewCreditNote
        
        print("Receipt clicked")
        is_PO_clicked = False
        canvas.itemconfigure(image_2, state="normal")  # แสดงรูปภาพอีกครั้ง
        if SavePDFs:
            canvas.delete(savecompleted)
            SavePDFs = False

         # ลบข้อความที่มีอยู่PO
        if is_PO_created:
            CustomerNamePO_text.destroy()
            RefernceNoPO_Text.destroy()
            pdffile_Text.destroy()
            Date_text.destroy()
            canvas.delete(create_NewPO)
            canvas.delete(SalesPO)
            canvas.delete(NamePO)
            canvas.delete(Reference)
            canvas.delete(TextPDF)
            
            canvas.itemconfigure(PO_instance.image_PO1, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO2, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO3, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO4, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO5, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO6, state="hidden")
            canvas.itemconfigure(PO_instance.image_111, state="hidden")
            canvas.delete(Date_Pdfinput)
            
          
                        # ลบทุก Header โดยใช้ลูป for
            for header_id in POTabelHeaders:
                canvas.delete(header_id)
            is_PO_created = False
        # ลบข้อความที่มีอยู่
        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            canvas.delete(SalesQuotation)
            is_quotation_created = False
        
        # ลบข้อความที่มีอยู่
        if is_invoice_created:
            canvas.delete(Create_NewInvoice)
            canvas.delete(Create_Invoice)
            is_invoice_created = False
        
        # ลบข้อความที่มีอยู่
        if is_receipt_created:
            canvas.delete(Create_NewReceipt)
            canvas.delete(Create_Receipt)
            is_receipt_created = False

        # ลบข้อความที่มีอยู่Creditnote
        if is_creditNote_created:
            canvas.delete(create_NewCreditNote)
            is_creditNote_created = False

         # ลบข้อความที่มีอยู่DebitNote
        if is_DebitNote_created:
            canvas.delete(create_NewDebitNote)
            is_DebitNote_created = False

        # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")
        canvas.delete("sql_PO")
        canvas.delete("sql_Receipt")
        canvas.delete("sql_Invoice")
        canvas.delete("sql_POIN")
        if not is_receipt_created:
            Create_NewReceipt = canvas.create_text(
                310.0,
                210.0,
                anchor="nw",
                text="CreateNewReceipt",
                fill="#555555",
                font=("Inter", 14 * -1)
            )
            Create_Receipt = canvas.create_text(
                370.0,
                160.0,
                anchor="nw",
                text="Receipt",
                fill="#555555",
                font=("Inter", 14 * -1)
            )

            # Add event handlers
            canvas.tag_bind(Create_NewReceipt, "<Button-1>", lambda e, instance=CreateReceipt_instance: instance.on_CreateNewReceipt_click(event))
            canvas.tag_bind(Create_NewReceipt, "<Enter>", lambda e, instance=CreateReceipt_instance: instance.on_CreateNewReceipt_enter(event))
            canvas.tag_bind(Create_NewReceipt, "<Leave>", lambda e, instance=CreateReceipt_instance: instance.on_CreateNewReceipt_leave(event))
            
            is_receipt_created = True


                 # ดึง connection string จาก Conn.py
        connection_string = Conn.connection_string

        try:
            # ตรวจสอบว่าการเชื่อมต่อสำเร็จหรือไม่
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        # สร้าง cursor เพื่อ execute คำสั่ง SQL
        cursor = connection.cursor()

        # คำสั่ง SQL เพื่อดึงข้อมูลที่ต้องการ
        cursor.execute("SELECT [Date], [ReceiptNumber], [CustomerName], [Description], [TotalAmount] FROM Receipt ORDER BY [ReceiptID] DESC")

        # ดึงข้อมูลทั้งหมดจากการ execute คำสั่ง SQL
        rows = cursor.fetchall()

        # แสดงข้อมูลใน Canvas
        for row_index, row in enumerate(rows[:12]):  # แสดงเฉพาะ 10 ข้อมูลแรก
            for col_index, data in enumerate(row):  # แสดงข้อมูลทั้งหมดในแถว
                text_object = canvas.create_text(
                    header_positions[col_index],
                    290.0 + row_index * 30,  # ตำแหน่งลงมาให้ทุกแถว
                    anchor="nw",
                    text=data,
                    fill="black",
                    font=("Inter", 14 * -1)
                )
                canvas.itemconfig(text_object, tags="sql_Receipt")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL

            

    def on_receipt_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(receipt_text, "fill")
        canvas.itemconfig(receipt_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_receipt_leave(self, event):
        canvas.itemconfig(receipt_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)

class CreateNewReceipt ():
    def __init__(self, username):
        self.username = username
        self.original_text_color = ""
        self.original_cursor = ""
    def on_CreateNewReceipt_click(self, event):
        global CreateNewReceipt
        print("CreateNewReceipt clicked") 
        window.withdraw()  # ซ่อนหน้าหลัก
            # รับเส้นทางของโปรแกรม exe
        exe_path = os.path.dirname(sys.argv[0])
        
        # ระบุเส้นทางของไฟล์ Invoice.py ในโฟลเดอร์เดียวกับ exe
        file_path = os.path.join(exe_path, "Receipt.py")
        print("เส้นทางสำหรับไฟล์ Receipt.py:", file_path)

        if os.path.exists(file_path):
            try:
                # เปิดโปรแกรม QUOTATIONNEW และส่งค่า username มาด้วย
                process = subprocess.Popen(["pythonw", file_path, self.username])
                
                # รอจนกว่าโปรแกรม QUOTATIONNEW จะปิดลง
                process.wait()
                
                # เมื่อโปรแกรม QUOTATIONNEW ปิดลงแล้ว โหลดหน้าหลักขึ้นมา
                window.deiconify()
            except Exception as e:
                print(f"Error: {e}")
        else:
            print(f"File not found: {file_path}")




    def on_CreateNewReceipt_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(Create_NewReceipt, "fill")
        canvas.itemconfig(Create_NewReceipt, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_CreateNewReceipt_leave(self, event):
        canvas.itemconfig(Create_NewReceipt, fill=original_text_color)
        canvas.config(cursor=original_cursor)      

class Invoice:
    original_text_color = ""
    original_cursor = ""

    def on_Invoice_click(self, event):
        global SavePDFs,savecompleted,is_PO_clicked,Create_Invoice,create_NewPO,is_PO_created,is_DebitNote_created,create_NewDebitNote,is_quotation_created, is_receipt_created, Create_NewQuotation, Create_NewInvoice, is_invoice_created , Create_NewReceipt,is_creditNote_created ,create_NewCreditNote
        print("Invoice clicked")
        canvas.itemconfigure(image_2, state="normal")  # แสดงรูปภาพอีกครั้ง
       # ลบข้อความที่มีอยู่Quotation
        is_PO_clicked = False
        if SavePDFs:
            canvas.delete(savecompleted)
            SavePDFs = False

        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            canvas.delete(SalesQuotation)
            is_quotation_created = False
        
        if is_PO_created:
            CustomerNamePO_text.destroy()
            RefernceNoPO_Text.destroy()
            pdffile_Text.destroy()
            Date_text.destroy()
            canvas.delete(create_NewPO)
            
            canvas.delete(SalesPO)
            canvas.delete(NamePO)
            canvas.delete(Reference)
            canvas.delete(TextPDF)
            
            canvas.itemconfigure(PO_instance.image_PO1, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO2, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO3, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO4, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO5, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO6, state="hidden")
            canvas.itemconfigure(PO_instance.image_111, state="hidden")
            canvas.delete(Date_Pdfinput)
            
            
          
                        # ลบทุก Header โดยใช้ลูป for
            for header_id in POTabelHeaders:
                canvas.delete(header_id)
            
         
            is_PO_created = False

            
        
        # ลบข้อความที่มีอยู่Invoice
        if is_invoice_created:
            canvas.delete(Create_NewInvoice)
            canvas.delete(Create_Invoice)
            is_invoice_created = False
        
        # ลบข้อความที่มีอยู่Receipt
        if is_receipt_created:
            canvas.delete(Create_NewReceipt)
            canvas.delete(Create_Receipt)
            is_receipt_created = False

         # ลบข้อความที่มีอยู่DebitNote
        if is_DebitNote_created:
            canvas.delete(create_NewDebitNote)
            is_DebitNote_created = False

            # ลบข้อความที่มีอยู่Creditnote
        if is_creditNote_created:
            canvas.delete(create_NewCreditNote)
            is_creditNote_created = False

         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")
        canvas.delete("sql_PO")
        canvas.delete("sql_Receipt")
        canvas.delete("sql_Invoice")
        canvas.delete("sql_POIN")

        if not is_invoice_created:
            Create_NewInvoice = canvas.create_text(
                310.0,
                210.0,
                anchor="nw",
                text="CreateNewInvoice",
                fill="#555555",
                font=("Inter", 14 * -1)
            )
            Create_Invoice = canvas.create_text(
                370.0,
                160.0,
                anchor="nw",
                text="Invoice",
                fill="#555555",
                font=("Inter", 14 * -1)
            )

            # Add event handlers
            canvas.tag_bind(Create_NewInvoice, "<Button-1>", lambda e, instance=CreatNewInvoice_instance: instance.on_CreateNewInvoice_click(event))
            canvas.tag_bind(Create_NewInvoice, "<Enter>", lambda e, instance=CreatNewInvoice_instance: instance.on_CreateNewInvoice_enter(event))
            canvas.tag_bind(Create_NewInvoice, "<Leave>", lambda e, instance=CreatNewInvoice_instance: instance.on_CreateNewInvoice_leave(event))
            
            is_invoice_created = True


                # ดึง connection string จาก Conn.py
        connection_string = Conn.connection_string

        try:
            # ตรวจสอบว่าการเชื่อมต่อสำเร็จหรือไม่
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        # สร้าง cursor เพื่อ execute คำสั่ง SQL
        cursor = connection.cursor()

        # คำสั่ง SQL เพื่อดึงข้อมูลที่ต้องการ
        cursor.execute("SELECT [Date], [InvoiceNumber], [CustomerName], [Description], [TotalAmount] FROM Invoice ORDER BY [InvoiceID] DESC")

        # ดึงข้อมูลทั้งหมดจากการ execute คำสั่ง SQL
        rows = cursor.fetchall()

        # แสดงข้อมูลใน Canvas
        for row_index, row in enumerate(rows[:12]):  # แสดงเฉพาะ 10 ข้อมูลแรก
            for col_index, data in enumerate(row):  # แสดงข้อมูลทั้งหมดในแถว
                text_object = canvas.create_text(
                    header_positions[col_index],
                    290.0 + row_index * 30,  # ตำแหน่งลงมาให้ทุกแถว
                    anchor="nw",
                    text=data,
                    fill="black",
                    font=("Inter", 14 * -1)
                )
                canvas.itemconfig(text_object, tags="sql_Invoice")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL

    def on_Invoice_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(Invoice_text, "fill")
        canvas.itemconfig(Invoice_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_Invoice_leave(self, event):
        canvas.itemconfig(Invoice_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)

class CreateNewInvoice:
    def __init__(self, username):
        self.username = username
        self.original_text_color = ""
        self.original_cursor = ""
        
    def on_CreateNewInvoice_click(self, event):
        global CreateNewInvoice
        print("CreateNewInvoice clicked") 


        print("CreateNewQuotation clicked") 
        window.withdraw()  # ซ่อนหน้าหลัก
            # รับเส้นทางของโปรแกรม exe
        exe_path = os.path.dirname(sys.argv[0])
        
        # ระบุเส้นทางของไฟล์ Invoice.py ในโฟลเดอร์เดียวกับ exe
        file_path = os.path.join(exe_path, "Invoice.py")
        print("เส้นทางสำหรับไฟล์ Invoice.py:", file_path)

        if os.path.exists(file_path):
            try:
                # เปิดโปรแกรม QUOTATIONNEW และส่งค่า username มาด้วย
                process = subprocess.Popen(["pythonw", file_path, self.username])
                
                # รอจนกว่าโปรแกรม QUOTATIONNEW จะปิดลง
                process.wait()
                
                # เมื่อโปรแกรม QUOTATIONNEW ปิดลงแล้ว โหลดหน้าหลักขึ้นมา
                window.deiconify()
            except Exception as e:
                print(f"Error: {e}")
        else:
            print(f"File not found: {file_path}")




    def on_CreateNewInvoice_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(Create_NewInvoice, "fill")
        canvas.itemconfig(Create_NewInvoice, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")
    def on_CreateNewInvoice_leave(self, event):
        canvas.itemconfig(Create_NewInvoice, fill=original_text_color)
        canvas.config(cursor=original_cursor)     

class Credit_Note:
    original_text_color = ""
    original_cursor = ""

    def on_CreditNote_click(self, event):
        global is_DebitNote_created,create_NewDebitNote,create_NewCreditNote ,is_creditNote_created, is_quotation_created , Create_NewQuotation , is_invoice_created , Create_NewInvoice , is_receipt_created , Create_NewReceipt
        print("CreditNote clicked")
        # ลบข้อความที่มีอยู่Creditnote
        if is_creditNote_created:
            canvas.delete(create_NewCreditNote)
            is_creditNote_created = False

        # ลบข้อความที่มีอยู่Quotation
        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            is_quotation_created = False

        # ลบข้อความที่มีอยู่Invoice
        if is_invoice_created:
            canvas.delete(Create_NewInvoice)
            canvas.delete(Create_Invoice)
            is_invoice_created = False
        
        # ลบข้อความที่มีอยู่Receipt
        if is_receipt_created:
            canvas.delete(Create_NewReceipt)
            is_receipt_created = False

         # ลบข้อความที่มีอยู่DebitNote
        if is_DebitNote_created:
            canvas.delete(create_NewDebitNote)
            is_DebitNote_created = False
        
         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")


        if not is_creditNote_created:
            create_NewCreditNote = canvas.create_text(
                310.0,
                210.0,
                anchor="nw",
                text="CreateNewCreditNote",
                fill="#555555",
                font=("Inter", 14 * -1)
            )

        # Add event handlers
            canvas.tag_bind(create_NewCreditNote, "<Button-1>", lambda e, instance=CreateNewCredit_Note_instance: instance.on_CreateNewCredit_Note_click(event))
            canvas.tag_bind(create_NewCreditNote, "<Enter>", lambda e, instance=CreateNewCredit_Note_instance: instance.on_CreateNewCredit_Note_enter(event))
            canvas.tag_bind(create_NewCreditNote, "<Leave>", lambda e, instance=CreateNewCredit_Note_instance: instance.on_CreateNewCredit_Note_leave(event))
            
            is_creditNote_created = True

    def on_CreditNote_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(CreditNote_text, "fill")
        canvas.itemconfig(CreditNote_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_CreditNote_leave(self, event):
        canvas.itemconfig(CreditNote_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)
        
class CreateNewCredit_Note:
    original_text_color = ""
    original_cursor = ""
    def on_CreateNewCredit_Note_click(self, event):
        global Credit_Note
        print("CreateNewCreditNote clicked") 
    def on_CreateNewCredit_Note_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(create_NewCreditNote, "fill")
        canvas.itemconfig(create_NewCreditNote, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")
    def on_CreateNewCredit_Note_leave(self, event):
        canvas.itemconfig(create_NewCreditNote, fill=original_text_color)
        canvas.config(cursor=original_cursor)   

class Debit_Note:
    original_text_color = ""
    original_cursor = ""

    def on_DebitNote_click(self, event):
        global is_PO_created, create_NewPO, create_NewDebitNote , is_DebitNote_created, is_creditNote_created, create_NewCreditNote, is_quotation_created, Create_NewQuotation, is_invoice_created, Create_NewInvoice, is_receipt_created, is_receipt_created
        print("DebitNote clicked")

            # ลบข้อความที่มีอยู่PO
        if is_PO_created:
            canvas.delete(create_NewPO)
            is_PO_created = False
        # ลบข้อความที่มีอยู่DebitNote
        if is_DebitNote_created:
            canvas.delete(create_NewDebitNote)
            is_DebitNote_created = False

         # ลบข้อความที่มีอยู่Creditnote
        if is_creditNote_created:
            canvas.delete(create_NewCreditNote)
            is_creditNote_created = False

        # ลบข้อความที่มีอยู่Quotation
        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            is_quotation_created = False

        # ลบข้อความที่มีอยู่Invoice
        if is_invoice_created:
            canvas.delete(Create_NewInvoice)
            canvas.delete(Create_Invoice)
            is_invoice_created = False
        
        # ลบข้อความที่มีอยู่Receipt
        if is_receipt_created:
            canvas.delete(Create_NewReceipt)
            is_receipt_created = False
         
         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")

        if not is_DebitNote_created:
            create_NewDebitNote = canvas.create_text(
                310.0,
                210.0,
                anchor="nw",
                text="CreateNewDebitNote",
                fill="#555555",
                font=("Inter", 14 * -1)
            )

        # Add event handlers
            canvas.tag_bind(create_NewDebitNote, "<Button-1>", lambda e, instance=CreateNewDebit_Note_instance: instance.on_CreateNewDebit_Note_click(event))
            canvas.tag_bind(create_NewDebitNote, "<Enter>", lambda e, instance=CreateNewDebit_Note_instance: instance.on_CreateNewDebit_Note_enter(event))
            canvas.tag_bind(create_NewDebitNote, "<Leave>", lambda e, instance=CreateNewDebit_Note_instance: instance.on_CreateNewDebit_Note_leave(event))
            
            is_DebitNote_created = True

        

    def on_DebitNote_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(DebitNote_text, "fill")
        canvas.itemconfig(DebitNote_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_DebitNote_leave(self, event):
        canvas.itemconfig(DebitNote_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)
        
class CreateNewDebit_Note:
    original_text_color = ""
    original_cursor = ""
    def on_CreateNewDebit_Note_click(self, event):
        global Credit_Note
        print("CreateNewDebitNote clicked") 
    def on_CreateNewDebit_Note_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(create_NewDebitNote, "fill")
        canvas.itemconfig(create_NewDebitNote, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")
    def on_CreateNewDebit_Note_leave(self, event):
        canvas.itemconfig(create_NewDebitNote, fill=original_text_color)
        canvas.config(cursor=original_cursor)  
 
is_PO_clicked = False  # เริ่มต้นสถานะของปุ่ม PO ว่ายังไม่ถูกคลิก
class PO:
    original_text_color = ""
    original_cursor = ""
    
    def on_PO_click(self, event):
        global is_PO_clicked,SavePDFs,Date_Pdfinput,Date_text ,pdffile_Text,RefernceNoPO_Text,CustomerNamePO_text ,header_id,POTabelHeaders,savecompleted,TextPDF,Reference,NamePO,PO_SalesPO,Vendor_text,SalesPO,PO_Text,Quotation_Text,is_receipt_created, Create_NewReceipt, is_PO_created, create_NewPO, is_DebitNote_created, create_NewDebitNote, is_creditNote_created, create_NewCreditNote, is_quotation_created, Create_NewQuotation, is_invoice_created, Create_NewInvoice
       
        if is_PO_clicked:  # ถ้าปุ่ม PO ถูกคลิกไปแล้ว
            return  # ไม่ต้องทำอะไรเพิ่มเติม
        

        is_PO_clicked = True  # ปรับสถานะของปุ่ม PO เป็น True เพื่อบ่งบอกว่าถูกคลิกแล้ว
        print("POIN_clicked")
        canvas.itemconfigure(image_2, state="hidden")#ซ่อน
        if not PO_SalesPO:
            SalesPO = canvas.create_text(
            370.0,
            160.0,
            anchor="nw",
            text="POIN",
            fill="#555555",
            font=("Inter", 14 * -1)
            )

            PO_SalesPO = False
        

            # ลบข้อความที่มีอยู่PO
        if Quotation_Text:
            canvas.delete(SalesQuotation)
            Quotation_Text = False




            # ลบข้อความที่มีอยู่PO
        if is_PO_created:
            canvas.delete(create_NewPO)
            canvas.delete(NamePO)
            canvas.delete(Reference)
            canvas.delete(TextPDF)
           
            canvas.delete(Date_Pdfinput)
            # ลบทั้งหมดของ Header
            for header_id in POTabelHeaders:
                canvas.delete(header_id)
                        
          
            is_PO_created = False
        # ลบข้อความที่มีอยู่DebitNote
        if is_DebitNote_created:
            canvas.delete(create_NewDebitNote)
            is_DebitNote_created = False

         # ลบข้อความที่มีอยู่Creditnote
        if is_creditNote_created:
            canvas.delete(create_NewCreditNote)
            is_creditNote_created = False

        # ลบข้อความที่มีอยู่Quotation
        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            is_quotation_created = False

        # ลบข้อความที่มีอยู่Invoice
        if is_invoice_created:
            canvas.delete(Create_NewInvoice)
            canvas.delete(Create_Invoice)
            is_invoice_created = False
        
        # ลบข้อความที่มีอยู่Receipt
        if is_receipt_created:
            canvas.delete(Create_NewReceipt)
            canvas.delete(Create_Receipt)
            is_receipt_created = False

        

         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")
        canvas.delete("sql_PO")
         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Receipt")
        canvas.delete("sql_Invoice")
        canvas.delete("sql_POIN")

        if not is_PO_created:
                
                # Load the image
                self.image_image_1 = PhotoImage(file=relative_to_assets("TablePO.png"))

                # Add the image to the canvas
                self.image_PO1 = canvas.create_image(
                    1001.0,
                    259.0,
                    image=self.image_image_1
                )
                self.CustomerNamePO = PhotoImage(
                    file=relative_to_assets("CustomerNamePO.png"))
                self.image_PO2 = canvas.create_image(
                    573.0,
                    259.0,
                    image=self.CustomerNamePO
                )
                CustomerNamePO_text = Entry(
                    bd=0,
                    fg="#000000",
                    insertbackground="black",  # กำหนดสีของเคอเซอร์เมื่อพิมพ์เป็นสีดำ
                    highlightthickness=0,
                    readonlybackground="white"  # กำหนดสีพื้นหลังเป็นสีขาวเมื่ออยู่ในสถานะ readonly
                )

                CustomerNamePO_text.configure(bg="white")
                CustomerNamePO_text.place(
                    x=455.0,
                    y=244.0,
                    width=170.0,
                    height=30.0,
                )

                self.image_image_3 = PhotoImage(
                    file=relative_to_assets("RefernceNoPO.png"))
                self.image_PO3 = canvas.create_image(
                    573.0,
                    306.0,
                    image=self.image_image_3
                )
                RefernceNoPO_Text = Entry(
                    bd=0,
                    fg="#000000",
                    insertbackground="black",  # กำหนดสีของเคอเซอร์เมื่อพิมพ์เป็นสีดำ
                    highlightthickness=0,
                    readonlybackground="white"  # กำหนดสีพื้นหลังเป็นสีขาวเมื่ออยู่ในสถานะ readonly
                )

                RefernceNoPO_Text.configure(bg="white")
                RefernceNoPO_Text.place(
                    x=455.0,
                    y=291.0,
                    width=170.0,
                    height=30.0,
                )

                self.image_image_4 = PhotoImage(
                    file=relative_to_assets("pdffile.png"))
                self.image_PO4 = canvas.create_image(
                    573.0,
                    358.0,
                    image=self.image_image_4
                )
                pdffile_Text = Entry(
                    bd=0,
                    fg="#000000",
                    insertbackground="black",  # กำหนดสีของเคอเซอร์เมื่อพิมพ์เป็นสีดำ
                    highlightthickness=0,
                    readonlybackground="white"  # กำหนดสีพื้นหลังเป็นสีขาวเมื่ออยู่ในสถานะ readonly
                )

                pdffile_Text.configure(bg="white")
                pdffile_Text.place(
                    x=485.0,
                    y=343.0,
                    width=170.0,
                    height=30.0,
                )
            

                self.image_image_5 = PhotoImage(
                    file=relative_to_assets("searchPOPDF.png"))
                self.image_PO5 = canvas.create_image(
                    468.0,
                    360.0,
                    image=self.image_image_5
                )
                # ผูกเหตุการณ์คลิกกับปุ่ม SavePOPDF
                canvas.tag_bind(self.image_PO5, "<Button-1>", lambda event: self.Browfile(event))

                self.image_image_7 = PhotoImage(
                    file=relative_to_assets("SavePOPDF.png"))
                self.image_PO6 = canvas.create_image(
                    500.0,
                    480.0,
                    image=self.image_image_7
                )
                # ผูกเหตุการณ์คลิกกับปุ่ม SavePOPDF
                canvas.tag_bind(self.image_PO6, "<Button-1>", lambda event: self.save_po(event))

                self.image_image_Date = PhotoImage(
                    file=relative_to_assets("Date_text.png"))
                self.image_111 = canvas.create_image(
                    573.0,
                    410.0,
                    image=self.image_image_Date
                )
                Date_text = Entry(
                    bd=0,
                    fg="#000000",
                    insertbackground="black",  # กำหนดสีของเคอเซอร์เมื่อพิมพ์เป็นสีดำ
                    highlightthickness=0,
                    readonlybackground="white"  # กำหนดสีพื้นหลังเป็นสีขาวเมื่ออยู่ในสถานะ readonly
                )

                Date_text.configure(bg="white")
                Date_text.place(
                    x=455.0,
                    y=395.0,
                    width=170.0,
                    height=30.0,
                )
                # Function to set the current date in the Date_text Entry widget
                def set_current_date():
                    current_date = datetime.now().strftime("%d-%m-%Y")
                    Date_text.config(state='normal')  # เปิดการแก้ไขชั่วคราว
                    Date_text.delete(0, tk.END)
                    Date_text.insert(0, current_date)
                    Date_text.config(state='readonly')  # ตั้งเป็น readonly อีกครั้ง

                

                # Set the current date initially
                set_current_date()
                create_NewPO = canvas.create_text(
                    310.0,
                    210.0,
                    anchor="nw",
                    text="",
                    fill="#555555",
                    font=("Inter", 14 * -1)
                )
                NamePO = canvas.create_text(
                320.0,
                248.0,
                anchor="nw",
                text="Customer Name",
                fill="#555555",
                font=("Inter", 12 * -1)
                )

                Reference = canvas.create_text(
                    320.0,
                    295.0,
                    anchor="nw",
                    text="Reference No.",
                    fill="#555555",
                    font=("Inter", 12 * -1)
                )
                TextPDF = canvas.create_text(
                    320.0,
                    347.0,
                    anchor="nw",
                    text="Pdf file",
                    fill="#555555",
                    font=("Inter", 12 * -1)
                )

                

                Date_Pdfinput = canvas.create_text(
                    320.0,
                    400.0,
                    anchor="nw",
                    text="Date",
                    fill="#555555",
                    font=("Inter", 12 * -1)
                )
                    # Create text for headers
                # สร้าง headers
                headers = ["Date", "Reference No.", "Customer Name", "Actions"]
                header_positions = [800.0, 890.0, 1030.0, 1170.0]
                
                                
                # ดึงข้อมูลจากฐานข้อมูล
                connection = pyodbc.connect(connection_string)
                cursor = connection.cursor()
                cursor.execute("SELECT Date, ReferenceNO, CustomerName FROM PO_IN ORDER BY [POID] DESC")
                rows = cursor.fetchall()

                # นำข้อมูลที่ได้มาแสดงในตาราง
                for i, row in enumerate(rows[:10]):
                    # สร้างข้อมูลของแต่ละแถว
                    data_row = [row.Date, row.ReferenceNO, row.CustomerName]
                    

                    # สร้างข้อมูลในแต่ละเซลล์ของแถว
                    for j, data in enumerate(data_row):
                        # กำหนดตำแหน่งที่เซลล์จะแสดง
                        x = header_positions[j]
                        y = 290.0 + (i * 30)  # ปรับตำแหน่ง y ตามจำนวนแถวที่แสดง

                        # แสดงข้อมูลในเซลล์
                        text_object = canvas.create_text(x, y, anchor="nw", text=data, fill="#555555", font=("Inter", 12 * -1))
                        canvas.itemconfig(text_object, tags="sql_POIN")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL

                # สร้าง Header และเก็บ reference ไว้ใน POTabelHeaders
                POTabelHeaders = []
                for i, header in enumerate(headers):
                    header_id = canvas.create_text(
                        header_positions[i],
                        250.0,
                        anchor="nw",
                        text=header,
                        fill="#FFFFFF",
                        font=("Inter", 14 * -1)
                    )
                    POTabelHeaders.append(header_id)

            # Add event handlers
                canvas.tag_bind(create_NewPO, "<Button-1>", lambda e, instance=CreateNewPO_instance: instance.on_CreateNewPO_click(event))
                canvas.tag_bind(create_NewPO, "<Enter>", lambda e, instance=CreateNewPO_instance: instance.on_CreateNewPO_enter(event))
                canvas.tag_bind(create_NewPO, "<Leave>", lambda e, instance=CreateNewPO_instance: instance.on_CreateNewPO_leave(event))
                
                is_PO_created = True
                


        self.selected_file_path = None
    
    

    def on_SavePO(self, event):
        canvas.itemconfig(self.image_PO6, fill=original_text_color)
        canvas.config(cursor=original_cursor)
    
    def Browfile(self, event):
        print("PDF File")
        file_path = filedialog.askopenfilename(
            filetypes=[("PDF files", "*.pdf")], 
            title="Choose a PDF file"
        )
        if file_path:
            file_name = os.path.basename(file_path)  # ดึงชื่อไฟล์จากเส้นทางเต็ม
            self.selected_file_path = file_path  # เก็บเส้นทางไฟล์ที่เลือก
            pdffile_Text.config(state='normal')  # เปิดการแก้ไขชั่วคราว
            pdffile_Text.delete(0, tk.END)  # ลบข้อความเก่า
            pdffile_Text.insert(0, file_name)  # ใส่ชื่อไฟล์ใหม่
            pdffile_Text.config(state='readonly')  # ตั้งเป็น readonly อีกครั้ง
            print(f"Selected file: {file_name}")
            print(f"Selected file: {file_path}")

    def save_po(self, event=None):
        global savecompleted, SavePDFs
        print("Save PO")
        pdf_data = pdffile_Text.get()
        
        if not pdf_data:
            messagebox.showwarning("Warning", "กรุณาใส่ข้อมูล PDF.")
            return
        
        if self.selected_file_path:
            target_directory = r"\\n2nserver\Scan-In\Rung\PO_IN"  # ไดเรกทอรีเป้าหมาย
            if not os.path.exists(target_directory):
                os.makedirs(target_directory)  # สร้างไดเรกทอรีเป้าหมายถ้าไม่อยู่
            file_name = os.path.basename(self.selected_file_path)  # ดึงชื่อไฟล์จากเส้นทางเต็ม
            target_path = os.path.join(target_directory, file_name)  # สร้างเส้นทางเป้าหมาย
            #shutil.move(self.selected_file_path, target_path)  # ย้ายไฟล์ไปยังเป้าหมาย
            shutil.copy(self.selected_file_path, target_path)  # คัดลอกไฟล์ไปยังเป้าหมาย

            print(f"File moved to: {target_path}")

            # ดึงข้อมูลจากช่องข้อความ
            Date = Date_text.get()
            ReferenceNO = RefernceNoPO_Text.get()
            CustomerNamePO = CustomerNamePO_text.get()
            
            # การเชื่อมต่อฐานข้อมูล
            connection = pyodbc.connect(connection_string)
            cursor = connection.cursor()
            
            # แทรกข้อมูลลงในตาราง SQL
            cursor.execute('''INSERT INTO PO_IN (Date, ReferenceNO, CustomerName)
                            VALUES (?,?,?)''', (Date, ReferenceNO, CustomerNamePO))
            connection.commit()  # ยืนยันการบันทึกข้อมูล

            savecompleted = canvas.create_text(
                        450.0,
                        500.0,
                        anchor="nw",
                        text="save completed",
                        fill="#555555",
                        font=("Inter", 12 * -1)
                    )
            SavePDFs = True

            
            
                
               
    
               

    def on_PO_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(PO_text, "fill")
        canvas.itemconfig(PO_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_PO_leave(self, event):
        canvas.itemconfig(PO_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)

class CreateNewPO:
    def __init__(self, username):
        self.username = username
        self.original_text_color = ""
        self.original_cursor = ""
    def on_CreateNewPO_click(self, event):
        global Credit_Note
        print("CreateNewPO clicked") 
        
    def on_CreateNewPO_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(create_NewPO, "fill")
        canvas.itemconfig(create_NewPO, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")
    def on_CreateNewPO_leave(self, event):
        canvas.itemconfig(create_NewPO, fill=original_text_color)
        canvas.config(cursor=original_cursor)  


class PO_in:
    original_text_color = ""
    original_cursor = ""

    def on_PO_click(self, event):
        global POIN_text,PO_SalesPO,Vendor_text,POIN_po,PO_Text,Quotation_Text,is_receipt_created, Create_NewReceipt, is_PO_created, create_NewPO, is_DebitNote_created, create_NewDebitNote, is_creditNote_created, create_NewCreditNote, is_quotation_created, Create_NewQuotation, is_invoice_created, Create_NewInvoice
        print("PO_IN clicked")
        canvas.itemconfigure(image_2, state="normal")  # แสดงรูปภาพอีกครั้ง

        if not POIN_text:
            POIN_po = canvas.create_text(
            410.0,
            160.0,
            anchor="nw",
            text="POIN_text",
            fill="#555555",
            font=("Inter", 14 * -1)
            )
            POIN_text = True
        

            # ลบข้อความที่มีอยู่PO
        if Quotation_Text:
            canvas.delete(SalesQuotation)
            Quotation_Text = False

            # ลบข้อความที่มีอยู่PO
        if is_PO_created:
            canvas.delete(create_NewPO)
            is_PO_created = False
        # ลบข้อความที่มีอยู่DebitNote
        if is_DebitNote_created:
            canvas.delete(create_NewDebitNote)
            is_DebitNote_created = False

         # ลบข้อความที่มีอยู่Creditnote
        if is_creditNote_created:
            canvas.delete(create_NewCreditNote)
            is_creditNote_created = False

        # ลบข้อความที่มีอยู่Quotation
        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            is_quotation_created = False

        # ลบข้อความที่มีอยู่Invoice
        if is_invoice_created:
            canvas.delete(Create_NewInvoice)
            canvas.delete(Create_Invoice)
            is_invoice_created = False
        
        # ลบข้อความที่มีอยู่Receipt
        if is_receipt_created:
            canvas.delete(Create_NewReceipt)
            canvas.delete(Create_Receipt)
            is_receipt_created = False

         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")
        canvas.delete("sql_PO")
        canvas.delete("sql_Invoice")
        canvas.delete("sql_Receipt")
        canvas.delete("sql_POIN")

        if not is_PO_created:
                create_NewPO = canvas.create_text(
                    310.0,
                    210.0,
                    anchor="nw",
                    text="CreateNewPO",
                    fill="#555555",
                    font=("Inter", 14 * -1)
                )

            # Add event handlers
                canvas.tag_bind(create_NewPO, "<Button-1>", lambda e, instance=CreateNewPO_in_instance: instance.on_CreateNewPO_click(event))
                canvas.tag_bind(create_NewPO, "<Enter>", lambda e, instance=CreateNewPO_in_instance: instance.on_CreateNewPO_enter(event))
                canvas.tag_bind(create_NewPO, "<Leave>", lambda e, instance=CreateNewPO_in_instance: instance.on_CreateNewPO_leave(event))
                
                is_PO_created = True

                                # ดึง connection string จาก Conn.py
                connection_string = Conn.connection_string

                try:
                    # ตรวจสอบว่าการเชื่อมต่อสำเร็จหรือไม่
                    connection = pyodbc.connect(connection_string)
                    print("เชื่อมต่อสำเร็จ")
                except Exception as e:
                    print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

                # สร้าง cursor เพื่อ execute คำสั่ง SQL
                cursor = connection.cursor()

                # คำสั่ง SQL เพื่อดึงข้อมูลที่ต้องการ
                cursor.execute("SELECT [Date], [PONumber], [CustomerName], [Description], [TotalAmount] FROM PO ORDER BY [POID] DESC")

                # ดึงข้อมูลทั้งหมดจากการ execute คำสั่ง SQL
                rows = cursor.fetchall()

                # แสดงข้อมูลใน Canvas
                for row_index, row in enumerate(rows[:12]):  # แสดงเฉพาะ 10 ข้อมูลแรก
                    for col_index, data in enumerate(row):  # แสดงข้อมูลทั้งหมดในแถว
                        text_object = canvas.create_text(
                            header_positions[col_index],
                            290.0 + row_index * 30,  # ตำแหน่งลงมาให้ทุกแถว
                            anchor="nw",
                            text=data,
                            fill="black",
                            font=("Inter", 14 * -1)
                        )
                        canvas.itemconfig(text_object, tags="sql_PO")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL

    def on_PO_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(POVendor_text, "fill")
        canvas.itemconfig(POVendor_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_PO_leave(self, event):
        canvas.itemconfig(POVendor_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)


class CreateNewPO_in:
    def __init__(self, username):
        self.username = username
        self.original_text_color = ""
        self.original_cursor = ""
    def on_CreateNewPO_click(self, event):
        global Credit_Note
        print("CreateNewPO clicked") 
        window.withdraw()  # ซ่อนหน้าหลัก
        # เปิดไฟล์ PONEW.py ในหน้าต่างเดียวกัน
        file_path = "PONEW.py"
        
        if os.path.exists(file_path):
            try:
                # เปิดโปรแกรม QUOTATIONNEW และส่งค่า username มาด้วย
                process = subprocess.Popen(["pythonw", file_path, self.username])
                
                # รอจนกว่าโปรแกรม QUOTATIONNEW จะปิดลง
                process.wait()
                
                # เมื่อโปรแกรม QUOTATIONNEW ปิดลงแล้ว โหลดหน้าหลักขึ้นมา
                window.deiconify()
            except Exception as e:
                print(f"Error: {e}")
        else:
            print(f"File not found: {file_path}")
    def on_CreateNewPO_enter(self, event):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(create_NewPO, "fill")
        canvas.itemconfig(create_NewPO, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")
    def on_CreateNewPO_leave(self, event):
        canvas.itemconfig(create_NewPO, fill=original_text_color)
        canvas.config(cursor=original_cursor)  

#คลาสเวลากด Customer ให้แสดงเมนูและรูปภาพSalesDocumentCustomer
        
class SalesDocument:
    def on_quotation_click(event):
        global SavePDFs,is_PO_clicked,POIN_text,POIN_po,PO_SalesPO,is_PO_created,is_quotation_created,quotation_text, receipt_text, Invoice_text, CreditNote_text, DebitNote_text, image_6, PO_text, is_SalesDocument, SalesDocement_Tax,is_vandor,Quotation_Text,POVendor_text

# ลบข้อความที่มีอยู่DebitNote
        is_PO_clicked = False
        if SavePDFs:
            canvas.delete(savecompleted)
            SavePDFs = False

        if is_PO_created:
            CustomerNamePO_text.destroy()
            RefernceNoPO_Text.destroy()
            pdffile_Text.destroy()
            Date_text.destroy()
            canvas.delete(create_NewPO)
            canvas.delete(SalesPO)
            canvas.delete(NamePO)
            canvas.delete(Reference)
            canvas.delete(TextPDF)
          
            canvas.itemconfigure(PO_instance.image_PO1, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO2, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO3, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO4, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO5, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO6, state="hidden")
            canvas.itemconfigure(PO_instance.image_111, state="hidden")
            canvas.delete(Date_Pdfinput)
            

             # ลบทุก Header โดยใช้ลูป for
            for header_id in POTabelHeaders:
                canvas.delete(header_id)
            is_PO_created = False

        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            is_quotation_created = False
        
        if Quotation_Text :
            canvas.delete(SalesQuotation)
            Quotation_Text = False
        if POIN_text:
            canvas.delete(POIN_po)
            POIN_text = False
            
        if is_SalesDocument:
            canvas.delete(quotation_text)
            canvas.delete(receipt_text)
            canvas.delete(PO_text)
            canvas.delete(Invoice_text)
            #canvas.delete(CreditNote_text)
            #canvas.delete(DebitNote_text)
            canvas.delete(SalesDocement_Tax)
            is_SalesDocument = False
            

        if is_vandor:  
            canvas.delete(Vendor_text)
            canvas.delete(POVendor_text)
            is_vandor = False

        #Customer
        canvas.delete("sql_Quotation")
        canvas.delete("sql_PO")
        canvas.delete("sql_Receipt")
        canvas.delete("sql_Invoice")
        canvas.delete("sql_POIN")
        if not is_SalesDocument:
            print("SalesDocumentCustomer")
            
            SalesDocement_Tax = canvas.create_text(
                300.0,
                160.0,
                anchor="nw",
                text="Customer/",
                fill="#555555",
                font=("Inter", 14 * -1)
            )

            quotation_text = canvas.create_text(
                190.0,
                250.0,
                anchor="nw",
                text="Quotation",
                fill="#555555",
                font=("Inter", 14 * -1)
            )   
            PO_text = canvas.create_text(
                190.0,
                300.0,
                anchor="nw",
                text="PO",
                fill="#555555",
                font=("Inter", 14 * -1)
            )

            receipt_text = canvas.create_text(
                190.0,
                350.0,
                anchor="nw",
                text="Receipt",
                fill="#555555",
                font=("Inter", 14 * -1)
            )
            Invoice_text = canvas.create_text(
                190.0,
                400.0,
                anchor="nw",
                text="Invoice",
                fill="#555555",
                font=("Inter", 14 * -1)
            )
           # CreditNote_text = canvas.create_text(
             #   190.0,
             #   450.0,
             #   anchor="nw",
             #   text="Credit Note",
             #   fill="#555555",
              #  font=("Inter", 14 * -1)
            #)
            #DebitNote_text = canvas.create_text(
              #  190.0,
              #  500.0,
             #   anchor="nw",
              #  text="Debit Note",
              #  fill="#555555",
              #  font=("Inter", 14 * -1)
           # )
            
            is_SalesDocument = True

        # ฟังก์ชั่นเพิ่มเติมเพื่อเพิ่มรูปภาพหลังจากคลิก
        def add_image_after_click():
            global imageQuotation, image_Quotation, imageReceipt, image_Receipt, imageInvoice, image_Invoice,image_PO,imagePO
            imageQuotation = PhotoImage(file=relative_to_assets("image_7.png"))
            image_Quotation = canvas.create_image(
                160.0,
                250.0,
                anchor="nw",
                image=imageQuotation
            )     
            #PO
            imagePO = PhotoImage(file=relative_to_assets("image_7.png"))
            image_PO = canvas.create_image(
                160.0,
                300.0,
               anchor="nw",
                image=imagePO
            )
            #Receipt
            imageReceipt = PhotoImage(
            file=relative_to_assets("image_7.png"))
            image_Receipt = canvas.create_image(
               160.0,
               350.0,
                anchor="nw",
                image=imageReceipt
            )
            #invoice
            imageInvoice = PhotoImage(
            file=relative_to_assets("image_9.png"))
            image_Invoice = canvas.create_image(
                160.0,
                400.0,
                anchor="nw",
                image=imageInvoice
            )

            #imageDebitNot = PhotoImage(
             #   file=relative_to_assets("image_10.png"))
            #image_DebitNot = canvas.create_image(
                #160.0,
                #450.0,
               # anchor="nw",
                #image=imageDebitNot
           # )

            #imagePO = PhotoImage(
              #  file=relative_to_assets("image_10.png"))
            #image_PO = canvas.create_image(
              #  160.0,
             #   500.0,
              #  anchor="nw",
              #  image=imagePO
           # )

        # เรียกใช้ฟังก์ชันเพิ่มเติมเพื่อเพิ่มรูปภาพหลังจากคลิก
        add_image_after_click()
      
        # Add event handlers
        canvas.tag_bind(quotation_text, "<Button-1>", lambda e, instance=quotation_instance: instance.on_quotation_click(event))
        canvas.tag_bind(quotation_text, "<Enter>", lambda e, instance=quotation_instance: instance.on_quotation_enter(event))
        canvas.tag_bind(quotation_text, "<Leave>", lambda e, instance=quotation_instance: instance.on_quotation_leave(event))

        canvas.tag_bind(receipt_text, "<Button-1>", lambda e, instance=receipt_instance: instance.on_receipt_click(event))
        canvas.tag_bind(receipt_text, "<Enter>", lambda e, instance=receipt_instance: instance.on_receipt_enter(event))
        canvas.tag_bind(receipt_text, "<Leave>", lambda e, instance=receipt_instance: instance.on_receipt_leave(event))

        canvas.tag_bind(Invoice_text, "<Button-1>", lambda e, instance=invoice_instance: instance.on_Invoice_click(event))
        canvas.tag_bind(Invoice_text, "<Enter>", lambda e, instance=invoice_instance: instance.on_Invoice_enter(event))
        canvas.tag_bind(Invoice_text, "<Leave>", lambda e, instance=invoice_instance: instance.on_Invoice_leave(event))

      

      

    

        canvas.tag_bind(PO_text, "<Button-1>", lambda e, instance=PO_instance: instance.on_PO_click(event))
        canvas.tag_bind(PO_text, "<Enter>", lambda e, instance=PO_instance: instance.on_PO_enter(event))
        canvas.tag_bind(PO_text, "<Leave>", lambda e, instance=PO_instance: instance.on_PO_leave(event))



    def on_SalesDocument_enter(event):
        global original_text_color,original_cursor
        original_text_color = canvas.itemcget(SalesDocuments_text, "fill")  # เก็บสีเดิมของข้อความ
        canvas.itemconfig(SalesDocuments_text, fill="#17ADE7")  # ตั้งค่าสีข้อความเป็นสีน้ำเงิน
        original_cursor = canvas.cget("cursor")  # เก็บรูปลูกศรเดิมของ Canvas
        canvas.config(cursor="hand2")
    def on_SalesDocument_leave(event):
        canvas.itemconfig(SalesDocuments_text, fill=original_text_color)  # กลับไปเป็นสีเดิมเมื่อลากเม้าส์ออก
        canvas.config(cursor=original_cursor)  # คืนค่ารูปลูกศรเดิมของ Canvas

class Logout:
    def on_Logout_click(self):
        print("on_Logout_click")
        
        window.destroy()
        
        Logout.restart_program()
        
        # รีสตาร์ทโปรแกรม
       

    def restart_program():
        try:
            subprocess.run([sys.executable, "gui.py"])
        except Exception as e:
            print(f"เกิดข้อผิดพลาดในการรีสตาร์ทโปรแกรม: {e}")
    

    def on_Logout_enter(self):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(Logout_text, "fill")
        canvas.itemconfig(Logout_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_Logout_leave(self):
        canvas.itemconfig(Logout_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)
    
def display_username_in_gui():
    username = user.getusername()
    print(f"Logged in as: {username}")
#ฟังชั่นสำหรับ Update Username ปรับเปลี่ยนตามความเหมาะสม
def update_username_text():
    username = user.getusername()
    canvas.itemconfig(username_text, text=username)


class Vendor:
    def on_quotation_click(event):
        global SavePDFs,savecompleted,is_PO_clicked,POIN_po,POIN_text,is_PO_created,is_quotation_created,PO_SalesPO,Vendor_text,SalesQuotation,SalesPO,POVendor_text,is_vandor,quotation_text, receipt_text, Invoice_text, CreditNote_text, DebitNote_text, image_6, PO_text, is_SalesDocument, SalesDocement_Tax,VendorText,Vendor_text

# ลบข้อความที่มีอยู่DebitNote
        is_PO_clicked = False
        print("vendorcccclick")
        canvas.delete(quotation_text)
        canvas.delete(receipt_text)
        canvas.delete(PO_text)
        canvas.delete(Invoice_text)
            #canvas.delete(CreditNote_text)
            #canvas.delete(DebitNote_text)
         # ลบข้อความ SQL Q ที่มีอยู่
        canvas.delete("sql_Quotation")
        canvas.delete("sql_PO")
        canvas.delete("sql_Receipt")
        canvas.delete("sql_Invoice")
        canvas.delete("sql_POIN")
        if SavePDFs:
            canvas.delete(savecompleted)
            SavePDFs = False
        canvas.delete(SalesDocement_Tax)
        if POIN_text:
            canvas.delete(POIN_po)
            POIN_text = False

        if Quotation_Text:  
            canvas.delete(SalesQuotation)
            
            is_vandor = False

        

        if is_quotation_created:
            canvas.delete(Create_NewQuotation)
            is_quotation_created = False
        
        if is_PO_created:
            CustomerNamePO_text.destroy()
            RefernceNoPO_Text.destroy()
            pdffile_Text.destroy()
            Date_text.destroy()
            canvas.delete(create_NewPO)
            canvas.delete(SalesPO)
            canvas.delete(NamePO)
            canvas.delete(Reference)
            canvas.delete(TextPDF)

            canvas.itemconfigure(PO_instance.image_PO1, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO2, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO3, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO4, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO5, state="hidden")
            canvas.itemconfigure(PO_instance.image_PO6, state="hidden")
            canvas.itemconfigure(PO_instance.image_111, state="hidden")
            canvas.delete(Date_Pdfinput)
            

             # ลบทุก Header โดยใช้ลูป for
            for header_id in POTabelHeaders:
                canvas.delete(header_id)
            is_PO_created = False

        #Vendor
        if not is_vandor:
            print("VendorClack")
            
            Vendor_text = canvas.create_text(
                300.0,
                160.0,
                anchor="nw",
                text="Vendor/",
                fill="#555555",
                font=("Inter", 14 * -1)
            ) 
            POVendor_text = canvas.create_text(
                190.0,
                250.0,
                anchor="nw",
                text="PO",
                fill="#555555",
                font=("Inter", 14 * -1)
            )   
            canvas.tag_bind(POVendor_text, "<Button-1>", lambda e, instance=POin_instance: instance.on_PO_click(event))
            canvas.tag_bind(POVendor_text, "<Enter>", lambda e, instance=POin_instance: instance.on_PO_enter(event))
            canvas.tag_bind(POVendor_text, "<Leave>", lambda e, instance=POin_instance: instance.on_PO_leave(event))
            is_vandor = True


    def on_SalesDocument_enter(event):
        global original_text_color,original_cursor
        original_text_color = canvas.itemcget(VendorText, "fill")  # เก็บสีเดิมของข้อความ
        canvas.itemconfig(VendorText, fill="#17ADE7")  # ตั้งค่าสีข้อความเป็นสีน้ำเงิน
        original_cursor = canvas.cget("cursor")  # เก็บรูปลูกศรเดิมของ Canvas
        canvas.config(cursor="hand2")
    def on_SalesDocument_leave(event):
        canvas.itemconfig(VendorText, fill=original_text_color)  # กลับไปเป็นสีเดิมเมื่อลากเม้าส์ออก
        canvas.config(cursor=original_cursor)  # คืนค่ารูปลูกศรเดิมของ Canvas

# สร้างอ็อบเจ็กต์ของคลาส
quotation_instance = Quotation()
receipt_instance = Receipt()
invoice_instance = Invoice()
CreditNote_instance = Credit_Note()
DebitNote_imstance = Debit_Note()
sales_document_instance = SalesDocument()
Logout_instance = Logout()
CreateNewQuotation_instance = CreateNewQuotation(username)
CreateReceipt_instance = CreateNewReceipt(username)
CreatNewInvoice_instance = CreateNewInvoice(username)
CreateNewCredit_Note_instance = CreateNewCredit_Note()
CreateNewDebit_Note_instance = CreateNewDebit_Note()
PO_instance = PO()
CreateNewPO_instance = CreateNewPO(username)
POin_instance = PO_in()
CreateNewPO_in_instance = CreateNewPO_in(username)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 832,
    width = 1280,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    83.0,
    264.0,
    image=image_image_1
)

canvas.create_rectangle(
    315.0,
    375.0,
    355.0,
    415.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    63.0,
    374.0,
    103.0,
    414.0,
    fill="#555555",
    outline="")

canvas.create_rectangle(
    141.0,
    240.0,
    286.0,
    730.0,
    fill="#DBF0FF",
    outline="")

canvas.create_rectangle(
    306.0,
    283.0,
    1244.0,
    730.0,
    fill="#FFFFFF",
    outline="")

#ตาราง
image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    775.0,
    259.0,
    image=image_image_2
)
#Login
username_text = canvas.create_text(
    1110.0,
    53.0,
    anchor="nw",
    text=user.getusername(),  # ใช้ฟังก์ชันเพื่อดึงชื่อผู้ใช้
    fill="#17ADE7",
    font=("Inter", 14 * -1)
)
update_username_text()

Logout_text = canvas.create_text(
    1176.0,
    90.0,
    anchor="nw",
    text="Logout",
    fill="#555555",
    font=("Inter", 14 * -1)
)
canvas.tag_bind(Logout_text, "<Button-1>", Logout.on_Logout_click)
canvas.tag_bind(Logout_text, "<Enter>", Logout.on_Logout_enter)
canvas.tag_bind(Logout_text, "<Leave>", Logout.on_Logout_leave)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    160.0,
    166.0,
    image=image_image_3
)

SalesDocuments_text = canvas.create_text(
    52.0,
    289.0,
    anchor="nw",
    text="Customer",
    fill="#555555",
    font=("Inter", 14 * -1)
)
# เพิ่ม event handler เพื่อตรวจจับเหตุการณ์
canvas.tag_bind(SalesDocuments_text, "<Button-1>", SalesDocument.on_quotation_click)
canvas.tag_bind(SalesDocuments_text, "<Enter>", SalesDocument.on_SalesDocument_enter)
canvas.tag_bind(SalesDocuments_text, "<Leave>", SalesDocument.on_SalesDocument_leave)

SalesDocument.on_quotation_click(None)


# สร้างหัวตาราง
headers = ["Date", "Document No.", "Customer Name", "Product", "Grand Total Amount"]
header_positions = [351.0, 444.0, 575.0, 770.0, 1000.0]

for i, header in enumerate(headers):
    TabelHeaders = canvas.create_text(
        header_positions[i],
        246.0,
        anchor="nw",
        text=header,
        fill="#FFFFFF",
        font=("Inter", 14 * -1)
    )



VendorText = canvas.create_text(
    58.0,
    427.0,
    anchor="nw",
    text="Vendor",
    fill="#555555",
    font=("Inter", 14 * -1)
)

# เพิ่ม event handler เพื่อตรวจจับเหตุการณ์
canvas.tag_bind(VendorText, "<Button-1>", Vendor.on_quotation_click)
canvas.tag_bind(VendorText, "<Enter>", Vendor.on_SalesDocument_enter)
canvas.tag_bind(VendorText, "<Leave>", Vendor.on_SalesDocument_leave)

canvas.create_text(
    57.0,
    559.0,
    anchor="nw",
    text="Reports",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    74.0,
    104.0,
    anchor="nw",
    text="generative AI for innovative technology",
    fill="#555555",
    font=("Inter Light", 10 * -1)
)

#Search image
image_search = PhotoImage(
    file=relative_to_assets("input.png"))
imagesearch = canvas.create_image(
    1045.0,
    164.0,
    image=image_search
)


def searchtext_on_entry_click(event):
    if searchtext.get() == "email account or username":
        searchtext.delete(0, "end")

def searchtext_on_focus_out(event):
    if not searchtext.get() or searchtext.select_present():
        searchtext.insert(0, "email account or username")
        searchtext.config(font=("Inter", 14), fg="#C6C6C6")

searchtext = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
searchtext.place(
    x=885.0,
    y=150.0,
    width=350.0,
    height=28.0
)
# เรียกใช้ฟังก์ชันเพื่อตั้งค่าเริ่มต้น
searchtext_on_focus_out(None)  # ส่งพารามิเตอร์ event ในกรณีนี้เป็น None
# กำหนดเหตุการณ์เมื่อได้รับโฟกัสและเมื่อลงจาก Entry
searchtext.bind("<FocusIn>", searchtext_on_entry_click)
searchtext.bind("<FocusOut>", searchtext_on_focus_out)



def search():
    print('Search')

search_image = PhotoImage(file=relative_to_assets("Search.png"))
searchimage = Button(
    window,
    image=search_image,
    command=search,  # เมื่อคลิกที่ปุ่มนี้จะเรียกใช้ฟังก์ชัน login
    borderwidth=0,  # กำหนดความกว้างของเส้นขอบเป็น 0 เพื่อลบขอบเทาๆ
    highlightthickness=0,  # กำหนดความกว้างของ highlight ให้เป็น 0 เพื่อลบเส้นขอบเทาๆ
)
searchimage.place(x=858.0, y=156.0)



image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    1200.0,
    59.0,
    image=image_image_5
)

canvas.create_text(
    77.0,
    252.0,
    anchor="nw",
    text="C",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)



canvas.create_text(
    77.0,
    382.0,
    anchor="nw",
    text="V",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)

)

canvas.create_rectangle(
    321.0,
    252.0,
    335.0,
    266.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    63.0,
    513.0,
    103.0,
    553.0,
    fill="#555555",
    outline="")
canvas.create_text(
    77.0,
    514.0,
    anchor="nw",
    text="R",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

#Image Sys
image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    174.0,
    73.0,
    image=image_image_11
)

def next_page(event):
    global current_page_index, Create_NewQuotation, create_NewPO, Create_NewReceipt,SalesPO
    # เพิ่มตัวแปร current_page_index เพื่อเก็บดัชนีของหน้าปัจจุบัน
    current_page_index += 1
    
    if 'Create_NewQuotation' in globals() and canvas.coords(Create_NewQuotation):
        print("CreateNewQuotation is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ

        # ทำงานเมื่อกดปุ่ม "Next Page"
        print("Go to next page")

        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_Quotation")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        cursor = connection.cursor()
        cursor.execute("SELECT [Date], [QuotationNumber], [CustomerName], [Description], [TotalAmount] FROM Quotation ORDER BY [QuotationID] DESC")
        rows = cursor.fetchall()

        # ตรวจสอบว่ายังมีข้อมูลในหน้าถัดไปหรือไม่
        if current_page_index * 12 < len(rows):
            # แสดงข้อมูลใน Canvas หน้าถัดไป
            for row_index, row in enumerate(rows[current_page_index * 12 : (current_page_index + 1) * 12]):
                for col_index, data in enumerate(row):
                    text_object = canvas.create_text(
                        header_positions[col_index],
                        290.0 + row_index * 30,
                        anchor="nw",
                        text=data,
                        fill="black",
                        font=("Inter", 14 * -1)
                    )
                    canvas.itemconfig(text_object, tags="sql_Quotation")
        else:
            # หากหน้าถัดไปไม่มีข้อมูล ให้แสดงข้อมูลสุดท้ายที่มีอยู่
            last_page_index = (len(rows) - 1) // 12
            current_page_index = last_page_index
            for row_index, row in enumerate(rows[last_page_index * 12 :]):
                for col_index, data in enumerate(row):
                    text_object = canvas.create_text(
                        header_positions[col_index],
                        290.0 + row_index * 30,
                        anchor="nw",
                        text=data,
                        fill="black",
                        font=("Inter", 14 * -1)
                    )
                    canvas.itemconfig(text_object, tags="sql_Quotation")
                    
    elif 'SalesPO' in globals() and canvas.coords(SalesPO):
        print("TextPDF is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ
        print("Go to next page")

        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_POIN")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)
        header_positions_POIN = [800.0, 890.0, 1030.0]
        cursor = connection.cursor()
        cursor.execute("SELECT Date, ReferenceNO, CustomerName FROM PO_IN ORDER BY [POID] DESC")
        rows = cursor.fetchall()

        # ตรวจสอบว่ายังมีข้อมูลในหน้าถัดไปหรือไม่
        if current_page_index * 10 < len(rows):
            # แสดงข้อมูลใน Canvas หน้าถัดไป
            for i, row in enumerate(rows[current_page_index * 10 : (current_page_index + 1) * 10]):
                # สร้างข้อมูลของแต่ละแถว
                data_row = [row.Date, row.ReferenceNO, row.CustomerName]
                # สร้างข้อมูลในแต่ละเซลล์ของแถว
                for j, data in enumerate(data_row):
                    # กำหนดตำแหน่งที่เซลล์จะแสดง
                    x = header_positions_POIN[j]  # ใช้ตำแหน่งจากคลาส PO
                    y = 290.0 + (i * 30)  # ปรับตำแหน่ง y ตามจำนวนแถวที่แสดง
                    # แสดงข้อมูลในเซลล์
                    text_object = canvas.create_text(x, y, anchor="nw", text=data, fill="#555555", font=("Inter", 12 * -1))
                    canvas.itemconfig(text_object, tags="sql_POIN")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL
        else:
            # หากหน้าถัดไปไม่มีข้อมูล ให้แสดงข้อมูลสุดท้ายที่มีอยู่
            last_page_index = (len(rows) - 1) // 10
            current_page_index = last_page_index
            for i, row in enumerate(rows[last_page_index * 10 :]):
                # สร้างข้อมูลของแต่ละแถว
                data_row = [row.Date, row.ReferenceNO, row.CustomerName]
                # สร้างข้อมูลในแต่ละเซลล์ของแถว
                for j, data in enumerate(data_row):
                    # กำหนดตำแหน่งที่เซลล์จะแสดง
                    x = header_positions_POIN[j]  # ใช้ตำแหน่งจากคลาส PO
                    y = 290.0 + (i * 30)  # ปรับตำแหน่ง y ตามจำนวนแถวที่แสดง
                    # แสดงข้อมูลในเซลล์
                    text_object = canvas.create_text(x, y, anchor="nw", text=data, fill="#555555", font=("Inter", 12 * -1))
                    canvas.itemconfig(text_object, tags="sql_POIN")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL


    elif 'create_NewPO' in globals() and canvas.coords(create_NewPO):
        
        print("CreateNewPO is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ

        # ทำงานเมื่อกดปุ่ม "Next Page"
        print("Go to next page")

        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_PO")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        cursor = connection.cursor()
        cursor.execute("SELECT [Date], [PONumber], [CustomerName], [Description], [TotalAmount] FROM PO ORDER BY [POID] DESC")
        rows = cursor.fetchall()

        # ตรวจสอบว่ายังมีข้อมูลในหน้าถัดไปหรือไม่
        if current_page_index * 12 < len(rows):
            # แสดงข้อมูลใน Canvas หน้าถัดไป
            for row_index, row in enumerate(rows[current_page_index * 12 : (current_page_index + 1) * 12]):
                for col_index, data in enumerate(row):
                    text_object = canvas.create_text(
                        header_positions[col_index],
                        290.0 + row_index * 30,
                        anchor="nw",
                        text=data,
                        fill="black",
                        font=("Inter", 14 * -1)
                    )
                    canvas.itemconfig(text_object, tags="sql_PO")
        else:
            # หากหน้าถัดไปไม่มีข้อมูล ให้แสดงข้อมูลสุดท้ายที่มีอยู่
            last_page_index = (len(rows) - 1) // 12
            current_page_index = last_page_index
            for row_index, row in enumerate(rows[last_page_index * 12 :]):
                for col_index, data in enumerate(row):
                    text_object = canvas.create_text(
                        header_positions[col_index],
                        290.0 + row_index * 30,
                        anchor="nw",
                        text=data,
                        fill="black",
                        font=("Inter", 14 * -1)
                    )
                    canvas.itemconfig(text_object, tags="sql_PO")

    elif 'Create_NewReceipt' in globals() and canvas.coords(Create_NewReceipt):
        print("Create_NewReceipt is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ

        # ทำงานเมื่อกดปุ่ม "Next Page"
        print("Go to next page")

        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_Receipt")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        cursor = connection.cursor()
        cursor.execute("SELECT [Date], [ReceiptNumber], [CustomerName], [Description], [TotalAmount] FROM Receipt ORDER BY [ReceiptID] DESC")
        rows = cursor.fetchall()

        # ตรวจสอบว่ายังมีข้อมูลในหน้าถัดไปหรือไม่
        if current_page_index * 12 < len(rows):
            # แสดงข้อมูลใน Canvas หน้าถัดไป
            for row_index, row in enumerate(rows[current_page_index * 12 : (current_page_index + 1) * 12]):
                for col_index, data in enumerate(row):
                    text_object = canvas.create_text(
                        header_positions[col_index],
                        290.0 + row_index * 30,
                        anchor="nw",
                        text=data,
                        fill="black",
                        font=("Inter", 14 * -1)
                    )
                    canvas.itemconfig(text_object, tags="sql_Receipt")
        else:
            # หากหน้าถัดไปไม่มีข้อมูล ให้แสดงข้อมูลสุดท้ายที่มีอยู่
            last_page_index = (len(rows) - 1) // 12
            current_page_index = last_page_index
            for row_index, row in enumerate(rows[last_page_index * 12 :]):
                for col_index, data in enumerate(row):
                    text_object = canvas.create_text(
                        header_positions[col_index],
                        290.0 + row_index * 30,
                        anchor="nw",
                        text=data,
                        fill="black",
                        font=("Inter", 14 * -1)
                    )
                    canvas.itemconfig(text_object, tags="sql_Receipt")

    
# กำหนดตัวแปร current_page_index ให้เริ่มต้นที่ 0
current_page_index = 0

def previous_page(event):
    global current_page_index, Create_NewQuotation, create_NewPO, Create_NewReceipt
    # เพิ่มตัวแปร current_page_index เพื่อเก็บดัชนีของหน้าปัจจุบัน
    if 'Create_NewQuotation' in globals() and canvas.coords(Create_NewQuotation):
        print("CreateNewQuotation is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ
        current_page_index -= 1
        if current_page_index < 0:
            current_page_index = 0  # ไม่ให้ current_page_index ติดลบ

        
        # ทำงานเมื่อกดปุ่ม "Previous Page"
        print("Go to previous page")


        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_Quotation")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        cursor = connection.cursor()
        cursor.execute("SELECT [Date], [QuotationNumber], [CustomerName], [Description], [TotalAmount] FROM Quotation ORDER BY [QuotationID] DESC")
        rows = cursor.fetchall()

        # แสดงข้อมูลใน Canvas หน้าก่อนหน้า
        for row_index, row in enumerate(rows[current_page_index * 12 : (current_page_index + 1) * 12]):
            for col_index, data in enumerate(row):
                text_object = canvas.create_text(
                    header_positions[col_index],
                    290.0 + row_index * 30,
                    anchor="nw",
                    text=data,
                    fill="black",
                    font=("Inter", 14 * -1)
                )
                canvas.itemconfig(text_object, tags="sql_Quotation")


    elif canvas.coords(SalesPO):
        print("TextPDF is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ
        current_page_index -= 1
        if current_page_index < 0:
            current_page_index = 0  # ไม่ให้ current_page_index ติดลบ

        
        # ทำงานเมื่อกดปุ่ม "Previous Page"
        print("Go to previous page")


        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_POIN")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)
        header_positions_POIN = [800.0, 890.0, 1030.0]
        cursor = connection.cursor()
        cursor.execute("SELECT Date, ReferenceNO, CustomerName FROM PO_IN ORDER BY [POID] DESC")
        rows = cursor.fetchall()

        # แสดงข้อมูลใน Canvas หน้าก่อนหน้า
        for i, row in enumerate(rows[current_page_index * 10 : (current_page_index + 1) * 10]):
        
            # สร้างข้อมูลของแต่ละแถว
                data_row = [row.Date, row.ReferenceNO, row.CustomerName]
                # สร้างข้อมูลในแต่ละเซลล์ของแถว
                for j, data in enumerate(data_row):
                    # กำหนดตำแหน่งที่เซลล์จะแสดง
                    x = header_positions_POIN[j]  # ใช้ตำแหน่งจากคลาส PO
                    y = 290.0 + (i * 30)  # ปรับตำแหน่ง y ตามจำนวนแถวที่แสดง
                    # แสดงข้อมูลในเซลล์
                    text_object = canvas.create_text(x, y, anchor="nw", text=data, fill="#555555", font=("Inter", 12 * -1))
                    canvas.itemconfig(text_object, tags="sql_POIN")  # เพิ่ม tag "sql_text" เพื่อใช้ในการลบข้อความ SQL

    elif canvas.coords(create_NewPO):
        print("CreateNewPO is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ
        current_page_index -= 1
        if current_page_index < 0:
            current_page_index = 0  # ไม่ให้ current_page_index ติดลบ

        
        # ทำงานเมื่อกดปุ่ม "Previous Page"
        print("Go to previous page")


        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_PO")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        cursor = connection.cursor()
        cursor.execute("SELECT [Date], [PONumber], [CustomerName], [Description], [TotalAmount] FROM PO ORDER BY [POID] DESC")
        rows = cursor.fetchall()

        # แสดงข้อมูลใน Canvas หน้าก่อนหน้า
        for row_index, row in enumerate(rows[current_page_index * 12 : (current_page_index + 1) * 12]):
            for col_index, data in enumerate(row):
                text_object = canvas.create_text(
                    header_positions[col_index],
                    290.0 + row_index * 30,
                    anchor="nw",
                    text=data,
                    fill="black",
                    font=("Inter", 14 * -1)
                )
                canvas.itemconfig(text_object, tags="sql_PO")

    elif canvas.coords(Create_NewReceipt):
        print("CreateNewPO is displayed")  # หรือจะทำงานอะไรก็ได้ตามที่คุณต้องการ
        current_page_index -= 1
        if current_page_index < 0:
            current_page_index = 0  # ไม่ให้ current_page_index ติดลบ

        
        # ทำงานเมื่อกดปุ่ม "Previous Page"
        print("Go to previous page")


        # ลบข้อมูลที่มีอยู่บน Canvas
        canvas.delete("sql_Receipt")

        # ดึงข้อมูลจากฐานข้อมูล
        connection_string = Conn.connection_string
        try:
            connection = pyodbc.connect(connection_string)
            print("เชื่อมต่อสำเร็จ")
        except Exception as e:
            print("เกิดข้อผิดพลาดในการเชื่อมต่อ:", e)

        cursor = connection.cursor()
        cursor.execute("SELECT [Date], [ReceiptNumber], [CustomerName], [Description], [TotalAmount] FROM Receipt ORDER BY [ReceiptID] DESC")
        rows = cursor.fetchall()

        # แสดงข้อมูลใน Canvas หน้าก่อนหน้า
        for row_index, row in enumerate(rows[current_page_index * 12 : (current_page_index + 1) * 12]):
            for col_index, data in enumerate(row):
                text_object = canvas.create_text(
                    header_positions[col_index],
                    290.0 + row_index * 30,
                    anchor="nw",
                    text=data,
                    fill="black",
                    font=("Inter", 14 * -1)
                )
                canvas.itemconfig(text_object, tags="sql_Receipt")

#canvas.create_text(
 #   1093.0,
  #  199.0, 
   # anchor="nw",
    ##text="page",
    #fill="#555555",
    #font=("Inter", 14 * -1)
#)

next_text = canvas.create_text(
    1230.0,
    199.0,
    anchor="nw",
    text=">",
    fill="#555555",
    font=("Inter", 14 * -1)
) 

back_text = canvas.create_text(
    1200.0,
    199.0,
    anchor="nw",
    text="<",
    fill="#555555",
    font=("Inter", 14 * -1)
)


# เชื่อมโยงฟังก์ชันกับการคลิกที่ข้อความ "Next" และ "Back"
canvas.tag_bind(next_text, "<Button-1>", next_page)
canvas.tag_bind(back_text, "<Button-1>", previous_page)


# กำหนดขนาดขั้นต่ำและขนาดสูงสุดของหน้าต่าง
#window.minsize(800, 600)  # ขนาดขั้นต่ำ 800x600
#window.maxsize(screen_width, screen_height)  # ขนาดสูงสุดเท่ากับขนาดหน้าจอ

window.resizable(False, False)
window.mainloop()
     