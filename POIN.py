
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import Conn
import pyodbc
import sqlite3
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import Listbox, Button
from tkinter import messagebox
import sys
import openpyxl
from PySimpleGUI import PySimpleGUI as sg
from openpyxl.styles import Alignment, Font
from num2words import num2words

from datetime import datetime
import win32com.client
import os
import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')  # เปลี่ยน 'en_US.UTF-8' เป็น locale ที่ถูกต้องสำหรับระบบของคุณ
import json
import pandas as pd
import sqlite3

OUTPUT_PATH = Path(__file__).parent

def get_assets_path():
    # รับเส้นทางที่โปรแกรม exe อยู่
    exe_path = os.path.dirname(sys.argv[0])
    # ระบุเส้นทางสำหรับโฟลเดอร์ assets/frame0
    assets_path = os.path.join(exe_path, 'assets', 'AllImage')
    return assets_path

# เรียกใช้ฟังก์ชันเพื่อรับเส้นทางของโฟลเดอร์ assets
ASSETS_PATH = get_assets_path()
print("เส้นทางสำหรับโฟลเดอร์ของรูปภาพ:", ASSETS_PATH)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

#ฟังชั่นสำหรับแปลงExcelเป็น PDF 
def convert_excel_to_pdf(excel_path, output_pdf_path):
 
        # เปลี่ยนที่ตั้งของไฟล์ PDF ให้อยู่ในโฟเดอร์เดียวกับ Excel
        output_pdf_path = os.path.join(os.path.dirname(excel_path), f"Test.pdf")

        excel_app = win32com.client.Dispatch("Excel.Application")
      

        # Open the workbook
        workbook = excel_app.Workbooks.Open(excel_path)

        # Save as PDF
        workbook.ExportAsFixedFormat(0, output_pdf_path, 1, 0)
        workbook.Close(False)
        excel_app.Quit()
        # Add centering logic using reportlab and PyPDF2
        # ...
    

def SaveClose():
    try:
        # ดึง connection string จาก Conn.py
        connection_string = Conn.connection_string
        
        # รับข้อมูลจากวิดเจต์ Entry
        tax_id = TaxID.get()
        name_text = nametext.get()
        Address_text = Address.get()
        tel_text = tel.get()
        DocumentNO_text = DocumentNO.get()
        TotalAmount_text = TotalAmount.get()
        VATAmount_text = VATAmount.get()
        GrandTotalAmount_text = GrandTotalAmount.get()
        Date = date.get()

        # เรียกใช้งาน addnewitem() เพื่อเลือกรายการสินค้า
      

        # ตรวจสอบว่ามีการเลือกรายการสินค้าหรือไม่
        if selected_item_info:
            # ตั้งค่าการเชื่อมต่อ
            connection = pyodbc.connect(connection_string)
            cursor = connection.cursor()
            
            Description = selected_item_info[0] 
            
            # ตรวจสอบความถูกต้องของข้อมูล (ตัวอย่างเท่านั้น)
            # (คุณอาจต้องการทำการตรวจสอบอื่นๆ เช่น การตรวจสอบหมายเลขโทรศัพท์, ตัวเลขเท่านั้น เป็นต้น)
            if not tax_id.isdigit():
                messagebox.showerror("Error", "หมายเลขประจำตัวผู้เสียภาษีต้องเป็นตัวเลขเท่านั้น")
                return
            
            # แทรกข้อมูลลงในตาราง
            cursor.execute('''INSERT INTO PO (customerName, Date, CustomerAddress, customerTaxID, CustomerTel, PONumber, AmountBeforVat, Vat, TotalAmount, Description)
                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', (name_text, Date, Address_text, tax_id, tel_text, DocumentNO_text, TotalAmount_text, VATAmount_text, GrandTotalAmount_text, Description))
            # ยืนยันการบันทึกข้อมูล
            connection.commit()
            # ทำการบันทึกและอัพเดท counter ที่
            quotation_generator.save_quotation_number()

           
            # เพิ่มข้อมูลลงใน Excel
            write_to_excel_Quotation(name_text, Date, Address_text, DocumentNO_text, tax_id, tel_text, TotalAmount_text, VATAmount_text, GrandTotalAmount_text)
            import SignaturePO
            
            
            window.quit()
            
        else:
            messagebox.showwarning("Warning", "คุณยังไม่ได้เลือกรายการสินค้า")

    except Exception as e:
        messagebox.showerror("Error", f"เกิดข้อผิดพลาดในการบันทึกข้อมูล: {str(e)}")

table_data = []

class Products:
    def search_Product(search_keyword=None):
        try:
            # Connect to your SQL database
            connection_string = Conn.connection_string
            connection = pyodbc.connect(connection_string)
            cursor = connection.cursor()

            if search_keyword:
                query = f"SELECT ProductName, ProductQTY, ProductPrice, ProductCode FROM ProductNew WHERE ProductName LIKE ? OR ProductCode LIKE ?"
                cursor.execute(query, ('%' + search_keyword + '%', '%' + search_keyword + '%'))
            else:
                query = f"SELECT ProductName, ProductQTY, ProductPrice, ProductCode FROM ProductNew"
                cursor.execute(query)

            result = cursor.fetchall()

            # Close the connection to the database
            connection.close()

            return result
        except Exception as e:
            print(f"Error: {e}")
            return []

    selected_item_info = None

    sg.theme('DarkTeal12') # สีของสกอบาร์

    def addnewProducts():
        global selected_item_info

        items = Products.search_Product()  # เรียกใช้ search_Product() เพื่อรับข้อมูลสินค้าใหม่

        popup_layout = [
            [sg.InputText(key='-SEARCH-', size=(20,1)), sg.Button('ค้นหา',button_color=('black', 'white'))],
            [sg.Listbox(values=[], size=(30, 6), key='popup_items_listbox', enable_events=True)],
            [sg.Button("เลือก",button_color=('black', 'white')), sg.Button("ยกเลิก", button_color=('black', 'white'))]
        ]

        popup_window = sg.Window("รายการ Product", popup_layout, modal=True, background_color='lightblue')

        while True:
            popup_event, popup_values = popup_window.read()
            if popup_event in (sg.WIN_CLOSED, "ยกเลิก"):
                popup_window.close()
                popup_window = None
                break
            elif popup_event == 'ค้นหา':
                search_keyword = popup_values['-SEARCH-']
                items = Products.search_Product(search_keyword)
                popup_window['popup_items_listbox'].update(values=[item[0] for item in items])
            elif popup_event == "เลือก":
                # ลบรายการสินค้าที่แสดงบน Canvas ออกทั้งหมด
                for tag in ["product_item", "Product_text", "Description_Text", "Quantity_Text", "Unit_Text", "Amount_Text", "TotalAmount_Text", "delete_button", "delete_Text"]:
                    canvas.delete(tag)
                
                selected_items_listbox = popup_values.get('popup_items_listbox', [])
                if selected_items_listbox:
                    selected_item_name = selected_items_listbox[0]
                    if selected_item_name:
                        selected_item_info = next((item for item in items if item[0] == selected_item_name), None)

                        if selected_item_info:
                            print(len(selected_item_info))
                            # นำข้อมูลที่เลือกมาเก็บไว้
                            new_row_data = [
                                f'{len(table_data) + 1}',  # Item (Gen ตัวเลขขึ้นมาเอง)
                                selected_item_info[0],  # ProductName (Description)
                                selected_item_info[1],  # ProductQTY (Quantity)
                                '1',
                                selected_item_info[2],  # ProductPrice (Amount)
                                selected_item_info[3]  # Product Code (เพิ่ม Product Code ที่นี่)
                            ]

                            # แจ้งเมื่อไม่ใส่ข้อมูล
                            if not new_row_data:
                                sg.popup_error("Error", "กรุณาเลือกรายการก่อนที่จะทำการเพิ่มข้อมูล")
                            else:
                                table_data.append(new_row_data)

                                # คำนวณ Amount และแสดงผลใน GUI
                                total_amount = sum(float(row[4]) for row in table_data)  # TotalAmount
                                vat_amount = total_amount * 0.07  # VAT
                                grand_total_amount = total_amount + vat_amount  # GrandTotal

                                # อัปเดตค่าใน GUI Canvas สำหรับ TotalAmount, VATAmount, และ GrandTotalAmount
                                TotalAmount.delete(0, "end")
                                TotalAmount.insert(0, '{:,.2f}'.format(total_amount))
                                VATAmount.delete(0, "end")
                                VATAmount.insert(0, '{:,.2f}'.format(vat_amount))
                                GrandTotalAmount.delete(0, "end")
                                GrandTotalAmount.insert(0, '{:,.2f}'.format(grand_total_amount))

                                grand_total_text = num2words(grand_total_amount, lang='th')

                                # แสดงข้อมูลบนแคนวาส
                                y_offset = 450.0 + len(table_data) * 20

                                # สร้างข้อมูลบน Canvas พร้อมกำหนด tag เพื่อระบุวัตถุ
                                item_text = canvas.create_text(
                                    93.0,
                                    y_offset,  # ระยะห่างของแต่ละรายการ
                                    anchor="nw",
                                    text=new_row_data[0],  # Item
                                    fill="black",
                                    font=("Inter", 14 * -1)
                                )

                                # เพิ่ม tag ให้กับข้อมูลบน Canvas
                                canvas.addtag_withtag(f"product_item_{len(table_data)}", item_text)

                                Product_text = canvas.create_text(
                                    200.0,
                                    y_offset,  # ระยะห่างของแต่ละรายการ
                                    anchor="nw",
                                    text=new_row_data[5],  # Product Code
                                    fill="black",
                                    font=("Inter", 14 * -1)
                                )
                                # เพิ่ม tag ให้กับข้อมูลบน Canvas
                                canvas.addtag_withtag(f"Product_text_{len(table_data)}", Product_text)

                                Description_Text = canvas.create_text(
                                    330.0,
                                    y_offset,  # ระยะห่างของแต่ละรายการ
                                    anchor="nw",
                                    text=new_row_data[1],  # Description
                                    fill="black",
                                    font=("Inter", 14 * -1)
                                )
                                # เพิ่ม tag ให้กับข้อมูลบน Canvas
                                canvas.addtag_withtag(f"Description_Text_{len(table_data)}", Description_Text)

                                Quantity_Text = canvas.create_text(
                                    657.0,
                                    y_offset,  # ระยะห่างของแต่ละรายการ
                                    anchor="nw",
                                    text=new_row_data[2],  # Quantity
                                    fill="black",
                                    font=("Inter", 14 * -1)
                                )
                                # เพิ่ม tag ให้กับข้อมูลบน Canvas
                                canvas.addtag_withtag(f"Quantity_Text_{len(table_data)}", Quantity_Text)


                                Unit_Text = canvas.create_text(
                                    786.0,
                                    y_offset,  # ระยะห่างของแต่ละรายการ
                                    anchor="nw",
                                    text="1",  # Unit
                                    fill="black",
                                    font=("Inter", 14 * -1)
                                )
                                # เพิ่ม tag ให้กับข้อมูลบน Canvas
                                canvas.addtag_withtag(f"Unit_Text_{len(table_data)}", Unit_Text)

                                Amount_Text = canvas.create_text(
                                    895.0,
                                    y_offset,  # ระยะห่างของแต่ละรายการ
                                    anchor="nw",
                                    text=new_row_data[4],  # Amount
                                    fill="black",
                                    font=("Inter", 14 * -1)
                                )
                                canvas.addtag_withtag(f"Amount_Text_{len(table_data)}", Amount_Text)


                                TotalAmount_Text = canvas.create_text(
                                    1054.0,
                                    y_offset,  # ระยะห่างของแต่ละรายการ
                                    anchor="nw",
                                    text=float(new_row_data[3]) * float(new_row_data[4]),  # Total Amount
                                    fill="black",
                                    font=("Inter", 14 * -1)
                                )
                                canvas.addtag_withtag(f"TotalAmount_Text_{len(table_data)}", TotalAmount_Text)

                                # แสดงปุ่มลบ
                                delete_button = canvas.create_rectangle(
                                    1160,  # ตำแหน่ง X ของปุ่มลบ
                                    y_offset,
                                    1210,  # ตำแหน่ง X ของปุ่มลบ
                                    y_offset + 20,  # เพิ่มความสูงให้เข้าไปที่ลำดับต่อไป
                                    fill="red",
                                    outline="black"
                                )
                                canvas.addtag_withtag(f"delete_button_{len(table_data)}", delete_button)
                                # เขียนข้อความบนปุ่มลบ
                                delete_Text = canvas.create_text(
                                    1185,  # ตำแหน่ง X ของข้อความบนปุ่มลบ
                                    y_offset + 10,  # เพิ่มความสูงให้เข้าไปที่ลำดับต่อไป
                                    text="ลบ",
                                    fill="white",
                                    font=("Inter", 10)
                                )
                                canvas.addtag_withtag(f"delete_Text_{len(table_data)}", delete_Text)

                                # เชื่อมต่อปุ่มลบกับฟังก์ชันลบแถว
                                canvas.tag_bind(
                                    delete_button,
                                    "<Button-1>",
                                    lambda event, selected_row_data=new_row_data: Products.delete_Product(selected_row_data)
                                )

                                popup_window.close()
                                popup_window = None
                                return selected_item_info  # ส่งค่า selected_item_info กลับไป

    def delete_Product(selected_row_data):
        # หาตำแหน่งของแถวที่ต้องการลบในตารางข้อมูล table_data
        row_id = None
        for index, row in enumerate(table_data):
            if row == selected_row_data:
                row_id = index
                break

        if row_id is not None:
            # ลบแต่ละวัตถุที่เกี่ยวข้องกับรายการนี้ออกจาก Canvas
            for item_tag in ["product_item", "Product_text", "Description_Text", "Quantity_Text", "Unit_Text", "Amount_Text", "TotalAmount_Text", "delete_button", "delete_Text"]:
                canvas.delete(canvas.find_withtag(f"{item_tag}_{selected_row_data[0]}"))  # ใช้ ID ของแถวเป็น tag

            # ลบแถวจากตารางข้อมูล
            del table_data[row_id]

            # ปรับลำดับของแถวในตาราง table_data
            for i in range(row_id, len(table_data)):
                table_data[i][0] = str(i + 1)  # ปรับเลขลำดับของแถวในตารางเพื่อให้เริ่มที่ 1 ใหม่

            # ปรับชื่อ tag ของวัตถุบน Canvas เพื่อให้ตรงกับลำดับใหม่
            for i in range(row_id, len(table_data)):
                for item_tag in ["product_item", "Product_text", "Description_Text", "Quantity_Text", "Unit_Text", "Amount_Text", "TotalAmount_Text", "delete_button", "delete_Text"]:
                    canvas.addtag_withtag(f"{item_tag}_{table_data[i][0]}", canvas.find_withtag(f"{item_tag}_{i+2}"))  # เปลี่ยนชื่อ tag ของวัตถุบน Canvas ให้ตรงกับลำดับใหม่

    

        

        Products.update_canvas_with_new_data()

                # อัปเดตและแสดงผลใน GUI ด้วยข้อมูลใหม่
        Products.update_gui_with_new_data()
           

        
    # ฟังก์ชันสำหรับอัปเดตและแสดงผลใน GUI ด้วยข้อมูลใหม่
    def update_gui_with_new_data():
        total_amount = sum(float(row[4]) for row in table_data)  # TotalAmount
        vat_amount = total_amount * 0.07  # VAT
        grand_total_amount = total_amount + vat_amount  # GrandTotal

        TotalAmount.delete(0, "end")
        TotalAmount.insert(0, '{:,.2f}'.format(total_amount))
        VATAmount.delete(0, "end")
        VATAmount.insert(0, '{:,.2f}'.format(vat_amount))
        GrandTotalAmount.delete(0, "end")
        GrandTotalAmount.insert(0, '{:,.2f}'.format(grand_total_amount))

        grand_total_text = num2words(grand_total_amount, lang='th')

    def update_canvas_with_new_data():
        # ลบข้อมูลที่เกี่ยวข้องกับสินค้าที่เลือกไว้ก่อนหน้านี้
        for index, _ in enumerate(table_data):
            for item_tag in ["product_item", "Product_text", "Description_Text", "Quantity_Text", "Unit_Text", "Amount_Text", "TotalAmount_Text", "delete_button", "delete_Text"]:
                canvas.delete(f"{item_tag}_{index + 1}")

        # แสดงข้อมูลใหม่บน Canvas
        for index, row_data in enumerate(table_data):
            y_offset = 470.0 + index * 20

            item_text = canvas.create_text(
                93.0,
                y_offset,
                anchor="nw",
                text=row_data[0],  # Item
                fill="black",
                font=("Inter", 14 * -1)
            )
            canvas.addtag_withtag(f"product_item_{index + 1}", item_text)

            Product_text = canvas.create_text(
                200.0,
                y_offset,
                anchor="nw",
                text=row_data[5],  # Product Code
                fill="black",
                font=("Inter", 14 * -1)
            )
            canvas.addtag_withtag(f"Product_text_{index + 1}", Product_text)

            Description_Text = canvas.create_text(
                330.0,
                y_offset,
                anchor="nw",
                text=row_data[1],  # Description
                fill="black",
                font=("Inter", 14 * -1)
            )
            canvas.addtag_withtag(f"Description_Text_{index + 1}", Description_Text)

            Quantity_Text = canvas.create_text(
                657.0,
                y_offset,
                anchor="nw",
                text=row_data[2],  # Quantity
                fill="black",
                font=("Inter", 14 * -1)
            )
            canvas.addtag_withtag(f"Quantity_Text_{index + 1}", Quantity_Text)

            Unit_Text = canvas.create_text(
                786.0,
                y_offset,
                anchor="nw",
                text="1",  # Unit
                fill="black",
                font=("Inter", 14 * -1)
            )
            canvas.addtag_withtag(f"Unit_Text_{index + 1}", Unit_Text)

            Amount_Text = canvas.create_text(
                895.0,
                y_offset,
                anchor="nw",
                text=row_data[4],  # Amount
                fill="black",
                font=("Inter", 14 * -1)
            )
            canvas.addtag_withtag(f"Amount_Text_{index + 1}", Amount_Text)

            TotalAmount_Text = canvas.create_text(
                1054.0,
                y_offset,
                anchor="nw",
                text=float(row_data[3]) * float(row_data[4]),  # Total Amount
                fill="black",
                font=("Inter", 14 * -1)
            )
            canvas.addtag_withtag(f"TotalAmount_Text_{index + 1}", TotalAmount_Text)

            # แสดงปุ่มลบ
            delete_button = canvas.create_rectangle(
                1160,
                y_offset,
                1210,
                y_offset + 20,
                fill="red",
                outline="black"
            )
            canvas.addtag_withtag(f"delete_button_{index + 1}", delete_button)

            # เขียนข้อความบนปุ่มลบ
            delete_Text = canvas.create_text(
                1185,
                y_offset + 10,
                text="ลบ",
                fill="white",
                font=("Inter", 10)
            )
            canvas.addtag_withtag(f"delete_Text_{index + 1}", delete_Text)

            # เชื่อมต่อปุ่มลบกับฟังก์ชันลบแถว
            canvas.tag_bind(
                delete_button,
                "<Button-1>",
                lambda event, selected_row_data=row_data: Products.delete_Product(selected_row_data)
            )

                    
def search_customers(keyword):
    #Keyword สำหรับค้นหารายชื่อลูกค้าที่มีความคล้ายในข้อความที่เราพิมพ์ลงไป
    try:
        # Connect to your SQL database
        connection_string = Conn.connection_string
        connection = pyodbc.connect(connection_string)
        cursor = connection.cursor()

        # Search for customers in the database
        query = f"SELECT customerName, customerTaxID, customerAddress, customerTel FROM customers WHERE customerName LIKE '%{keyword}%'"
        cursor.execute(query)
        result = cursor.fetchall()
        
        # Close the connection to the database
        connection.close()
        return result
    except Exception as e:
        print(f"Error: {e}")
        return []
    
def search():
    # สร้างหน้าต่างป๊อปอัปพร้อมกล่องรายการ
        popup_layout = [
            [sg.InputText(key='-SEARCH-', size=(20,1)), sg.Button('ค้นหา', button_color=('black', 'white'), key='search_button')],
            [sg.Listbox(values=[], size=(30, 6), key='popup_customer_listbox', enable_events=True)],
            [sg.Button("เลือก", button_color=('black', 'white'), key='select_button'), sg.Button("ยกเลิก", button_color=('black', 'white'), key='cancel_button')]
        ]

        popup_window = sg.Window("รายชื่อลูกค้า", popup_layout, modal=True, background_color='lightblue') #กำหนดสีพื้นหลัง
        
        while True:
            popup_event, popup_values = popup_window.read()

            if popup_event == sg.WIN_CLOSED or popup_event == "cancel_button":
                popup_window.close()
                break
            
            elif popup_event == "search_button":
                keyword = popup_values['-SEARCH-']  # รับค่าจาก input
                customers = search_customers(keyword)  # ค้นหาลูกค้าตามคำค้นหา

                # อัปเดต Listbox ด้วยรายชื่อลูกค้าที่ค้นหาได้
                popup_window['popup_customer_listbox'].update(values=[customer[0] for customer in customers])

            elif popup_event == "select_button":
                selected_customer_name = popup_values.get('popup_customer_listbox', [])[0]
                if selected_customer_name:
                    # ค้นหาลูกค้าที่เลือกในรายการทั้งหมดเพื่อรับข้อมูลเพิ่มเติม
                    selected_customer_info = next((customer for customer in customers if customer[0] == selected_customer_name), None)

                    if selected_customer_info:
                        nametext.delete(0, "end")  # ลบข้อมูลที่มีอยู่ใน Entry widget ชื่อ
                        nametext.insert(0, selected_customer_info[0])  # แทรกข้อมูลใหม่ลงใน Entry widget ชื่อ

                        TaxID.delete(0, "end")  # ลบข้อมูลที่มีอยู่ใน Entry widget หมายเลขประจำตัวผู้เสียภาษี
                        TaxID.insert(0, selected_customer_info[1])  # แทรกข้อมูลใหม่ลงใน Entry widget หมายเลขประจำตัวผู้เสียภาษี

                        Address.delete(0, "end")  # ลบข้อมูลที่มีอยู่ใน Entry widget ที่อยู่
                        Address.insert(0, selected_customer_info[2])  # แทรกข้อมูลใหม่ลงใน Entry widget ที่อยู่

                        tel.delete(0, "end")  # ลบข้อมูลที่มีอยู่ใน Entry widget เบอร์โทรศัพท์
                        tel.insert(0, selected_customer_info[3])  # แทรกข้อมูลใหม่ลงใน Entry widget เบอร์โทรศัพท์

                popup_window.close()  # ปิดหน้าต่าง Popup
                break  # ออกจากลูป while หลังจากกดปุ่ม "เลือก"

#ฟังชั่นdate
class ClassDate:
    def __init__(self):
        pass
    
    def parse_date(self, date_str, date_formats):
        # เมธอดนี้ใช้สำหรับแปลงวันที่จาก string เป็น object datetime
        for format_str in date_formats:
            try:
                return datetime.strftime(date_str, format_str)
            except ValueError:
                pass
        raise ValueError(f"Unable to parse date: {date_str}")

ClassDate_instance = ClassDate()
                    
#คลาสสำหรับGenเลขที่ใบเสนอราคา
class QuotationNumberGenerator:
    def __init__(self):
        self.counter = self.load_quotation_number()

    def load_quotation_number(self):
        try:
            with open("PO_counter.json", "r") as file:
                data = json.load(file)
                return data["counter"]
            
        except (FileNotFoundError, json.JSONDecodeError):
            return 1
        

    def save_quotation_number(self):
        self.counter += 1
        data = {"counter": self.counter}
        with open("PO_counter.json", "w") as file:
            json.dump(data, file)
            

    def generate_quotation_number(self):
        current_date = datetime.now()
        formatted_date = current_date.strftime("%d%m%y")
        quotation_number = f"PO{formatted_date}-{self.counter:03d}"
        
        
        return quotation_number

quotation_generator = QuotationNumberGenerator()

def display_customers(customers):
    # สร้าง Canvas เพื่อแสดงผลลัพธ์
    canvas.delete("all")  # เคลียร์ Canvas ก่อนที่จะแสดงผลใหม่
    y_position = 30
    for customer in customers:
        customer_info = ", ".join(customer)
        canvas.create_text(200, y_position, text=customer_info, font=("Helvetica", 10), anchor="center")
        y_position += 20

class Close:
    def on_Close_click(self):
        print("Close")
        window.destroy()
    
    def on_Close_enter(self):
        global original_text_color, original_cursor
        original_text_color = canvas.itemcget(Close_text, "fill")
        canvas.itemconfig(Close_text, fill="#17ADE7")
        original_cursor = canvas.cget("cursor")
        canvas.config(cursor="hand2")

    def on_Close_leave(self):
        canvas.itemconfig(Close_text, fill=original_text_color)
        canvas.config(cursor=original_cursor)


def write_to_excel_Quotation(name_text, Date, Address, DocumentNO_text, TaxID, tel_text, TotalAmount_text, VATAmount_text, GrandTotalAmount_text):
    # กำหนดที่อยู่ของไฟล์เทมเพลต Excel
    xlsx_template_path = "PurchaseOrderTemplate.xlsx"
    # กำหนดที่อยู่ของไฟล์ Excel ที่จะบันทึกข้อมูล
    timestamp = datetime.now().strftime("%d_%m_%Y_%H_%M_%S_")
    output_path = fr"\\N2N-BANK\Users\Administrator\Downloads\Excel\PurchaseOrder\PurchaseOrder_{timestamp}.xlsx"


    path = r"\\N2N-BANK\Users\Administrator\Downloads\Excel\PurchaseOrder"

        # สร้างโฟลเดอร์ใหม่หากยังไม่มี
    os.makedirs(path, exist_ok=True)

    # โหลดไฟล์ Excel เทมเพลต
    workbook = openpyxl.load_workbook(xlsx_template_path)
    # เลือกชีทที่ใช้
    sheet = workbook.active
    # เขียนข้อมูลลงในแถวและคอลัมน์ที่กำหนด
    sheet.cell(row=5, column=9, value=DocumentNO_text)
    sheet.cell(row=10, column=3, value=name_text)
    sheet.cell(row=10, column=8, value=Date)
    sheet.cell(row=12, column=3, value=Address)
    sheet.cell(row=7, column=9, value=TaxID)
    sheet.cell(row=11, column=8, value=tel_text)
    sheet.cell(row=25, column=9, value=TotalAmount_text)
    sheet.cell(row=27, column=9, value=VATAmount_text)
    sheet.cell(row=29, column=9, value=GrandTotalAmount_text)

    # ตัวอย่างของการใช้งาน
        # ตัวอย่างของการใช้งาน
    grand_total_amount_str = GrandTotalAmount.get()  # ดึงข้อมูลจากช่อง GrandTotalAmount
    # กำจัด comma separator ออก
    grand_total_amount_str = grand_total_amount_str.replace(',', '')
    grand_total_amount = float(grand_total_amount_str)
    # แปลงเป็นตัวอักษรภาษาไทย
    grand_total_text_thai = num2words(grand_total_amount, lang='th')

    # แทนที่ comma separator กลับเข้าไป
    grand_total_text_thai_with_comma = grand_total_text_thai.replace(',', '')

    sheet.cell(row=30, column=2, value=grand_total_text_thai_with_comma  + '  บาท')
    

         # กำหนดที่อยู่เริ่มต้นของแถวที่จะแทรกข้อมูลใหม่
    starting_row = 16

    # ลูปเพื่อแยกข้อมูลไอเทม
    for i, item_data in enumerate(table_data, start=1):
        # แถวที่จะแทรกข้อมูล
        current_row = starting_row + i
        amount = item_data[4]

        # ใช้การจัดรูปแบบข้อมูลด้วยฟังก์ชัน .format()
        formatted_amount = '{:,.2f}'.format(amount)
        # กำหนด Item 
        item_col_num = 2  # Column B
        sheet.cell(row=current_row, column=item_col_num, value=item_data[0])  # Item

        # กำหนด Description 
        description_col_num = 3  # Column C
        sheet.cell(row=current_row, column=description_col_num, value=item_data[1])  # Description

        # กำหนด Quantity 
        quantity_col_num = 7  # Column G
        sheet.cell(row=current_row, column=quantity_col_num, value=item_data[2])  # Quantity

        # กำหนด Unit 
        unit_col_num = 8  # Column H
        sheet.cell(row=current_row, column=unit_col_num, value='1')  # Unit

        # กำหนด Amount 
        amount_col_num = 9  # Column I
        sheet.cell(row=current_row, column=amount_col_num, value=formatted_amount)  # Amount

    # บันทึกไฟล์ Excel ที่มีข้อมูลใหม่
    workbook.save(output_path)
    # แสดงหน้าต่าง Popup แจ้งเตือนว่าข้อมูลถูกเขียนลง Excel สำเร็จ
    document_type = "Quotation"
       # เรียกฟังก์ชัน convert_excel_to_pdf เพื่อแปลง Excel เป็น PDF
    pdf_output_path = f"output_{document_type}_form_template.pdf"
    convert_excel_to_pdf(output_path, pdf_output_path)
    


# ตรวจสอบว่ามีอาร์กิวเมนต์ที่ถูกส่งมาหรือไม่
if len(sys.argv) > 1:
    username = sys.argv[1]
    print("Username:", username)
else:
    print("Username not provided")


window = Tk()

window.attributes('-fullscreen', True)  # ตั้งค่าให้หน้าต่างเต็มหน้าจอ
window.configure(bg = "#FFFFFF")
canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 832,
    width = 1280,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)


image_table = PhotoImage(file=relative_to_assets("table.png"))
imagetable = canvas.create_image(
    646.0,
    448.0,
    image=image_table
)

canvas.create_text(
    93.0,
    437.0,
    anchor="nw",
    text="Item",
    fill="#FFFFFF",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    186.0,
    437.0,
    anchor="nw",
    text="Product Description",
    fill="#FFFFFF",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    657.0,
    437.0,
    anchor="nw",
    text="Quantity",
    fill="#FFFFFF",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    895.0,
    437.0,
    anchor="nw",
    text="Unit Price",
    fill="#FFFFFF",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    786.0,
    437.0,
    anchor="nw",
    text="Unit",
    fill="#FFFFFF",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    1054.0,
    437.0,
    anchor="nw",
    text="Amount",
    fill="#FFFFFF",
    font=("Inter", 14 * -1)
)

#canvas.create_text(
    #1170.0,
    #437.0,
    #anchor="nw",
   # text="Actions",
  #  fill="#FFFFFF",
 #   font=("Inter", 14 * -1)
#)

image_image_3 = PhotoImage(
    file=relative_to_assets("imagecheck.png"))
image_3 = canvas.create_image(
    70.0,
    448.0,
    image=image_image_3
)

username ="sa"
canvas.create_text(
    1098.0,
    53.0,
    anchor="nw",
    text=username,
    fill="#17ADE7",
    font=("Inter", 14 * -1)
)

image_image_4 = PhotoImage(
    file=relative_to_assets("internalForm.png"))
image_4 = canvas.create_image(
    160.0,
    166.0,
    image=image_image_4
)

canvas.create_text(
    892.0,
    148.0,
    anchor="nw",
    text="Quotation",
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

canvas.create_text(
    292.0,
    156.0,
    anchor="nw",
    text="Sales Documents ",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    421.0,
    156.0,
    anchor="nw",
    text="PO ",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    445.0,
    156.0,
    anchor="nw",
    text=">",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    409.0,
    156.0,
    anchor="nw",
    text=">",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    455.0,
    156.0,
    anchor="nw",
    text="Create NewPO ",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    48.0,
    235.0,
    anchor="nw",
    text="Name:",
    fill="#555555",
    font=("Inter", 14 * -1)
)


canvas.create_text(
    892.0,
    281.0,
    anchor="nw",
    text="Date:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    892.0,
    640.0,
    anchor="nw",
    text="Discount:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    892.0,
    235.0,
    anchor="nw",
    text="Document No.:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

image_Quotation = PhotoImage(
    file=relative_to_assets("PurchaseOrder.png"))
imageQuotation = canvas.create_image(
    990.0,
    150.0,
    image=image_Quotation
)


canvas.create_text(
    892.0,
    595.0,
    anchor="nw",
    text="Total Amount:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    226.0,
    600.0,
    anchor="nw",
    text="Order By:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    580.0,
    600.0,
    anchor="nw",
    text="Prepareed By:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    212.0,
    657.0,
    anchor="nw",
    text="Signature",
    fill="#C6C6C6",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    578.0,
    657.0,
    anchor="nw",
    text="Signature",
    fill="#C6C6C6",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    212.0,
    726.0,
    anchor="nw",
    text="Fullname",
    fill="#C6C6C6",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    578.0,
    726.0,
    anchor="nw",
    text="Fullname",
    fill="#C6C6C6",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    48.0,
    188.0,
    anchor="nw",
    text="Customer Information",
    fill="#555555",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    48.0,
    392.0,
    anchor="nw",
    text="Items Information",
    fill="#555555",
    font=("Inter", 16 * -1)
)

canvas.create_text(
    48.0,
    281.0,
    anchor="nw",
    text="Address:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    892.0,
    327.0,
    anchor="nw",
    text="Terms Of Payment:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    892.0,
    685.0,
    anchor="nw",
    text="Vat Amount:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    997.0,
    685.0,
    anchor="nw",
    text="7%",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    892.0,
    730.0,
    anchor="nw",
    text="Grand Total Amount:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    48.0,
    327.0,
    anchor="nw",
    text="Tax Id:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    477.0,
    327.0,
    anchor="nw",
    text="Branch:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

image_Name = PhotoImage(
    file=relative_to_assets("image_Name.png"))
imageName = canvas.create_image(
    455.0,
    248.0,
    image=image_Name
)
nametext = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
nametext.place(
    x=120.0,
    y=233.0,
    width=600.0,
    height=30.0
)
search_image = PhotoImage(file=relative_to_assets("Search.png"))
searchimage = Button(
    window,
    image=search_image,
    command=search,  # เมื่อคลิกที่ปุ่มนี้จะเรียกใช้ฟังก์ชัน login
    borderwidth=0,  # กำหนดความกว้างของเส้นขอบเป็น 0 เพื่อลบขอบเทาๆ
    highlightthickness=0,  # กำหนดความกว้างของ highlight ให้เป็น 0 เพื่อลบเส้นขอบเทาๆ
)
searchimage.place(x=770.0, y=240.0)

image_Address = PhotoImage(
    file=relative_to_assets("image_Address.png"))
imageAddress = canvas.create_image(
    455.0,
    294.0,
    image=image_Address
)
Address = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
Address.place(
    x=120.0,
    y=280.0,
    width=650.0,
    height=30.0
)
image_TaxID = PhotoImage(
    file=relative_to_assets("image_TaxID.png"))
imageTaxID = canvas.create_image(
    190.0,
    340.0,
    image=image_TaxID
)
TaxID = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
TaxID.place(
    x=120.0,
    y=325.0,
    width=140.0,
    height=30.0
)
image_tel = PhotoImage(
    file=relative_to_assets("image_tel.png"))
imagetel = canvas.create_image(
    386.0,
    340.0,
    image=image_tel
)
tel = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
tel.place(
    x=315.0,
    y=325.0,
    width=140.0,
    height=30.0
)

image_DocumentNO = PhotoImage(
    file=relative_to_assets("image_DocumentNO.png"))
imageDocumentNO = canvas.create_image(
    1140.0,
    248.0,
    image=image_DocumentNO
)
DocumentNO = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
DocumentNO.place(
    x=1050.0,
    y=233.0,
    width=170.0,
    height=30.0
)

# ฟังก์ชันที่ใช้ในการอัพเดทข้อความใน DocumentNO
def update_document_number():
    document_number = quotation_generator.generate_quotation_number()
    DocumentNO.delete(0, 'end')  # ลบข้อความทั้งหมดที่อยู่ใน Entry widget
    DocumentNO.insert(0, document_number)   # แทรกข้อความใหม่ลงใน Entry widget

# อัพเดท DocumentNO เพื่อแสดงเลขที่ใบเสนอราคาที่ถูกสร้างขึ้นโดยอัตโนมัติ
update_document_number()




image_date = PhotoImage(
    file=relative_to_assets("image_date.png"))
imagedate = canvas.create_image(
    1140.0,
    294.0,
    image=image_date
)
image_Discount = PhotoImage(
    file=relative_to_assets("image_Discount.png"))
imageDiscount = canvas.create_image(
    1140.0,
    645.0,
    image=image_Discount
)
Discount = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
Discount.place(
    x=1050.0,
    y=630.0,
    width=150.0,
    height=30.0
)

image_TotalAmount = PhotoImage(
    file=relative_to_assets("image_TotalAmount.png"))
imageTotalAmount = canvas.create_image(
    1140.0,
    600.0,
    image=image_TotalAmount
)
TotalAmount = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
TotalAmount.place(
    x=1050.0,
    y=585.0,
    width=170.0,
    height=30.0
)

image_VATAmount = PhotoImage(
    file=relative_to_assets("image_VATAmount.png"))
imageVATAmount = canvas.create_image(
    1140.0,
    690.0,
    image=image_VATAmount
)
VATAmount = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
VATAmount.place(
    x=1050.0,
    y=675.0,
    width=150.0,
    height=30.0
)


image_GrandTotalAmount = PhotoImage(
    file=relative_to_assets("image_GrandTotalAmount.png"))
imageGrandTotalAmount = canvas.create_image(
    1140.0,
    735.0,
    image=image_GrandTotalAmount
)
GrandTotalAmount = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
GrandTotalAmount.place(
    x=1050.0,
    y=720.0,
    width=150.0,
    height=30.0
)


image_SingnatureOrderBy = PhotoImage(
    file=relative_to_assets("image_SingnatureOrderBy.png"))
imageSingnatureOrderBy = canvas.create_image(
    248.0,
    670.0,
    image=image_SingnatureOrderBy
)

image_SingnaturePrepareedBy = PhotoImage(
    file=relative_to_assets("image_SingnaturePrepareedBy.png"))
imageSingnaturePrepareedBy = canvas.create_image(
    614.0,
    670.0,
    image=image_SingnaturePrepareedBy
)



image_TermsOfPayment = PhotoImage(
    file=relative_to_assets("image_TermsOfPayment.png"))
imageTermsOfPayment = canvas.create_image(
    1140.0,
    340.0,
    image=image_TermsOfPayment
)
TermsOfPayment = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
TermsOfPayment.place(
    x=1050.0,
    y=325.0,
    width=170.0,
    height=30.0
)



image_image_17 = PhotoImage(
    file=relative_to_assets("image_vat7.png"))
image_17 = canvas.create_image(
    1005.0,
    690.0,
    image=image_image_17
)



image_fullnameOrderBy = PhotoImage(
    file=relative_to_assets("image_fullnameOrderBy.png"))
imagefullnameOrderBy = canvas.create_image(
    248.0,
    737.0,
    image=image_fullnameOrderBy
)

image_fiullnamePrepareedBy = PhotoImage(
    file=relative_to_assets("image_fiullnamePrepareedBy.png"))
imagefiullnamePrepareedBy = canvas.create_image(
    614.0,
    737.0,
    image=image_fiullnamePrepareedBy
)

canvas.create_text(
    283.0,
    327.0,
    anchor="nw",
    text="Tel:",
    fill="#555555",
    font=("Inter", 14 * -1)
)
image_Branch = PhotoImage(
    file=relative_to_assets("image_Branch.png"))
imageBranch = canvas.create_image(
    666.0,
    340.0,
    image=image_Branch
)
Branch = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
Branch.place(
    x=545.0,
    y=325.0,
    width=230.0,
    height=30.0
)

canvas.create_text(
    74.0,
    104.0,
    anchor="nw",
    text="generative AI for innovative technology",
    fill="#555555",
    font=("Inter Light", 10 * -1)
)

image_image_24 = PhotoImage(
    file=relative_to_assets("image_24.png"))
image_24 = canvas.create_image(
    1200.0,
    59.0,
    image=image_image_24
)

image_image_25 = PhotoImage(
    file=relative_to_assets("image_25.png"))
image_25 = canvas.create_image(
    174.0,
    73.0,
    image=image_image_25
)

from tkinter import Tk, Button, Entry, TOP, LEFT
from tkcalendar import Calendar

def show_calendar():
    # Create a Tkinter window
    calendar_window = Tk()
    
    def get_selected_date():
        selected_date_str = cal.get_date()
        selected_date_obj = datetime.strptime(selected_date_str, "%m/%d/%y")  # Convert the selected date from string to datetime object
        formatted_date_for_sql = selected_date_obj.strftime("%Y-%m-%d")  # Format the date as 'YYYY-MM-DD' for SQL
        formatted_date_for_display = selected_date_obj.strftime("%d-%m-%Y")  # Format the date as 'DD-MM-YYYY' for display
        date.delete(0, 'end')  # Clear the Entry widget
        date.insert(0, formatted_date_for_display)  # Insert the formatted date for display into the Entry widget
        calendar_window.destroy()  # Close the calendar window after selecting the date
        return formatted_date_for_sql  # Return the formatted date for SQL



    # Create Calendar widget
    cal = Calendar(calendar_window)
    cal.pack(fill="both", expand=True)
    # Create button to confirm the selected date
    confirm_button = Button(calendar_window, text="Confirm", command=get_selected_date)
    confirm_button.pack(side=TOP)

# Function to handle button click
def show_calendar_window():
    show_calendar()
 
#ปุ่มกด Date
image_date1 = PhotoImage(file=relative_to_assets("image_date1.png"))
button_date1 = Button(
    window,
    image=image_date1,
    command=lambda: show_calendar_window(),  # เรียกใช้ show_calendar_window() โดยใช้ lambda เพื่อครอบไว้
    borderwidth=0,
    highlightthickness=0,
)
button_date1.place(x=1047.0, y=285.0)

date = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
date.place(
    x=1075.0,
    y=280.0,
    width=150.0,
    height=30.0
)
# ฟังก์ชันสำหรับแสดงวันที่ปัจจุบันบน Entry widget
def show_current_date():
    import datetime
    current_date = datetime.datetime.now().strftime("%d-%m-%Y")  # รูปแบบวันที่เป็น 'YYYY-MM-DD'
    date.delete(0, 'end')  # Clear the Entry widget
    date.insert(0, current_date)  # Insert the current date into the Entry widget
show_current_date()

canvas.create_text(
    100.0,
    772.0,
    anchor="nw",
    text="Date",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.create_text(
    464.0,
    772.0,
    anchor="nw",
    text="Date:",
    fill="#555555",
    font=("Inter", 14 * -1)
)

image_dateOrderBy = PhotoImage(
    file=relative_to_assets("image_dateOrderBy.png"))
imagedateOrderBy = canvas.create_image(
    248.0,
    785.0,
    image=image_dateOrderBy
)
dateOrderBy = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
dateOrderBy.place(
    x=180.0,
    y=770.0,
    width=150.0,
    height=30.0
)

image_datePrepareedBy = PhotoImage(
    file=relative_to_assets("image_datePrepareedBy.png"))
imagedatePrepareedBy = canvas.create_image(
    614.0,
    785.0,
    image=image_datePrepareedBy
)
datePrepareedBy = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000000",
    highlightthickness=0
)
datePrepareedBy.place(
    x=545.0,
    y=770.0,
    width=150.0,
    height=30.0
)

image_image_29 = PhotoImage(
    file=relative_to_assets("image_date3.png"))
image_29 = canvas.create_image(
    162.0,
    785.0,
    image=image_image_29
)

image_image_30 = PhotoImage(
    file=relative_to_assets("image_date2.png"))
image_30 = canvas.create_image(
    528.0,
    785.0,
    image=image_image_30
)

Close_text = canvas.create_text(
    1071.0,
    107.0,
    anchor="nw",
    text="Close",
    fill="#555555",
    font=("Inter", 14 * -1)
)

canvas.tag_bind(Close_text, "<Button-1>", Close.on_Close_click)
canvas.tag_bind(Close_text, "<Enter>", Close.on_Close_enter)
canvas.tag_bind(Close_text, "<Leave>", Close.on_Close_leave)

addnewitem_image = PhotoImage(file=relative_to_assets("addnewitem.png"))

button_addnewitem = Button(
    window,
    image=addnewitem_image,
    command=Products.addnewProducts,  # เมื่อคลิกที่ปุ่มนี้จะเรียกใช้ฟังก์ชัน login
    borderwidth=0,  # กำหนดความกว้างของเส้นขอบเป็น 0 เพื่อลบขอบเทาๆ
    highlightthickness=0,  # กำหนดความกว้างของ highlight ให้เป็น 0 เพื่อลบเส้นขอบเทาๆ
)
# กำหนดตำแหน่งของปุ่มโดยใช้เมทอด place
button_addnewitem.place(x=50.0, y=550.0)



SaveClose_image = PhotoImage(file=relative_to_assets("saveClose.png"))

# สร้างปุ่มโดยใช้รูปภาพและคำสั่งที่ต้องการเรียกเมื่อคลิกปุ่ม
button_login = Button(
    window,
    image=SaveClose_image,
    command=SaveClose,  # เมื่อคลิกที่ปุ่มนี้จะเรียกใช้ฟังก์ชัน login
    borderwidth=0,  # กำหนดความกว้างของเส้นขอบเป็น 0 เพื่อลบขอบเทาๆ
    highlightthickness=0,  # กำหนดความกว้างของ highlight ให้เป็น 0 เพื่อลบเส้นขอบเทาๆ
)
# กำหนดตำแหน่งของปุ่มโดยใช้เมทอด place
button_login.place(x=1120.0, y=100.0)
def close_window():
    window.quit()
# ผูกเหตุการณ์ WM_DELETE_WINDOW กับฟังก์ชัน close_window
window.protocol("WM_DELETE_WINDOW", close_window)

window.resizable(False, False)
window.mainloop()
